module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateComment {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateLike {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateNotice {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateRepply {
  count: Int!
}

type AggregateRoom {
  count: Int!
}

type AggregateSuggestion {
  count: Int!
}

type AggregateTalk {
  count: Int!
}

type AggregateTalkComment {
  count: Int!
}

type AggregateTalkRepply {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  text: String!
  user: User
  post: Post
  repply(where: RepplyWhereInput, orderBy: RepplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Repply!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutCommentsInput
  post: PostCreateOneWithoutCommentsInput
  repply: RepplyCreateManyWithoutCommentInput
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneWithoutRepplyInput {
  create: CommentCreateWithoutRepplyInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutPostInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutCommentsInput
  repply: RepplyCreateManyWithoutCommentInput
}

input CommentCreateWithoutRepplyInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutCommentsInput
  post: PostCreateOneWithoutCommentsInput
}

input CommentCreateWithoutUserInput {
  id: ID
  text: String!
  post: PostCreateOneWithoutCommentsInput
  repply: RepplyCreateManyWithoutCommentInput
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  text: String
  user: UserUpdateOneWithoutCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  repply: RepplyUpdateManyWithoutCommentInput
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateOneRequiredWithoutRepplyInput {
  create: CommentCreateWithoutRepplyInput
  update: CommentUpdateWithoutRepplyDataInput
  upsert: CommentUpsertWithoutRepplyInput
  connect: CommentWhereUniqueInput
}

input CommentUpdateWithoutPostDataInput {
  text: String
  user: UserUpdateOneWithoutCommentsInput
  repply: RepplyUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutRepplyDataInput {
  text: String
  user: UserUpdateOneWithoutCommentsInput
  post: PostUpdateOneWithoutCommentsInput
}

input CommentUpdateWithoutUserDataInput {
  text: String
  post: PostUpdateOneWithoutCommentsInput
  repply: RepplyUpdateManyWithoutCommentInput
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpsertWithoutRepplyInput {
  update: CommentUpdateWithoutRepplyDataInput!
  create: CommentCreateWithoutRepplyInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  user: UserWhereInput
  post: PostWhereInput
  repply_every: RepplyWhereInput
  repply_some: RepplyWhereInput
  repply_none: RepplyWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type File {
  id: ID!
  url: String!
  postRatio: Float
  post: Post
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  url: String!
  postRatio: Float
  post: PostCreateOneWithoutFilesInput
}

input FileCreateManyWithoutPostInput {
  create: [FileCreateWithoutPostInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutPostInput {
  id: ID
  url: String!
  postRatio: Float
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  postRatio_ASC
  postRatio_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FilePreviousValues {
  id: ID!
  url: String!
  postRatio: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  postRatio: Float
  postRatio_not: Float
  postRatio_in: [Float!]
  postRatio_not_in: [Float!]
  postRatio_lt: Float
  postRatio_lte: Float
  postRatio_gt: Float
  postRatio_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  NOT: [FileScalarWhereInput!]
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateInput {
  url: String
  postRatio: Float
  post: PostUpdateOneWithoutFilesInput
}

input FileUpdateManyDataInput {
  url: String
  postRatio: Float
}

input FileUpdateManyMutationInput {
  url: String
  postRatio: Float
}

input FileUpdateManyWithoutPostInput {
  create: [FileCreateWithoutPostInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateWithoutPostDataInput {
  url: String
  postRatio: Float
}

input FileUpdateWithWhereUniqueWithoutPostInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutPostDataInput!
}

input FileUpsertWithWhereUniqueWithoutPostInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutPostDataInput!
  create: FileCreateWithoutPostInput!
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  postRatio: Float
  postRatio_not: Float
  postRatio_in: [Float!]
  postRatio_not_in: [Float!]
  postRatio_lt: Float
  postRatio_lte: Float
  postRatio_gt: Float
  postRatio_gte: Float
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
}

type Like {
  id: ID!
  user: User
  post: Post
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LikeConnection {
  pageInfo: PageInfo!
  edges: [LikeEdge]!
  aggregate: AggregateLike!
}

input LikeCreateInput {
  id: ID
  user: UserCreateOneWithoutLikesInput
  post: PostCreateOneWithoutLikesInput
}

input LikeCreateManyWithoutPostInput {
  create: [LikeCreateWithoutPostInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateWithoutPostInput {
  id: ID
  user: UserCreateOneWithoutLikesInput
}

input LikeCreateWithoutUserInput {
  id: ID
  post: PostCreateOneWithoutLikesInput
}

type LikeEdge {
  node: Like!
  cursor: String!
}

enum LikeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LikePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LikeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  NOT: [LikeScalarWhereInput!]
}

type LikeSubscriptionPayload {
  mutation: MutationType!
  node: Like
  updatedFields: [String!]
  previousValues: LikePreviousValues
}

input LikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LikeWhereInput
  AND: [LikeSubscriptionWhereInput!]
  OR: [LikeSubscriptionWhereInput!]
  NOT: [LikeSubscriptionWhereInput!]
}

input LikeUpdateInput {
  user: UserUpdateOneWithoutLikesInput
  post: PostUpdateOneWithoutLikesInput
}

input LikeUpdateManyWithoutPostInput {
  create: [LikeCreateWithoutPostInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateWithoutPostDataInput {
  user: UserUpdateOneWithoutLikesInput
}

input LikeUpdateWithoutUserDataInput {
  post: PostUpdateOneWithoutLikesInput
}

input LikeUpdateWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutPostDataInput!
}

input LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutUserDataInput!
}

input LikeUpsertWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutPostDataInput!
  create: LikeCreateWithoutPostInput!
}

input LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutUserDataInput!
  create: LikeCreateWithoutUserInput!
}

input LikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
}

input LikeWhereUniqueInput {
  id: ID
}

scalar Long

type Message {
  id: ID!
  text: String!
  from: User!
  to: User!
  room: Room!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  text: String!
  from: UserCreateOneInput!
  to: UserCreateOneInput!
  room: RoomCreateOneWithoutMessagesInput!
}

input MessageCreateManyWithoutRoomInput {
  create: [MessageCreateWithoutRoomInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutRoomInput {
  id: ID
  text: String!
  from: UserCreateOneInput!
  to: UserCreateOneInput!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  text: String
  from: UserUpdateOneRequiredInput
  to: UserUpdateOneRequiredInput
  room: RoomUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateManyDataInput {
  text: String
}

input MessageUpdateManyMutationInput {
  text: String
}

input MessageUpdateManyWithoutRoomInput {
  create: [MessageCreateWithoutRoomInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutRoomInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutRoomInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateWithoutRoomDataInput {
  text: String
  from: UserUpdateOneRequiredInput
  to: UserUpdateOneRequiredInput
}

input MessageUpdateWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutRoomDataInput!
}

input MessageUpsertWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutRoomDataInput!
  create: MessageCreateWithoutRoomInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  from: UserWhereInput
  to: UserWhereInput
  room: RoomWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createLike(data: LikeCreateInput!): Like!
  updateLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
  upsertLike(where: LikeWhereUniqueInput!, create: LikeCreateInput!, update: LikeUpdateInput!): Like!
  deleteLike(where: LikeWhereUniqueInput!): Like
  deleteManyLikes(where: LikeWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createNotice(data: NoticeCreateInput!): Notice!
  updateNotice(data: NoticeUpdateInput!, where: NoticeWhereUniqueInput!): Notice
  updateManyNotices(data: NoticeUpdateManyMutationInput!, where: NoticeWhereInput): BatchPayload!
  upsertNotice(where: NoticeWhereUniqueInput!, create: NoticeCreateInput!, update: NoticeUpdateInput!): Notice!
  deleteNotice(where: NoticeWhereUniqueInput!): Notice
  deleteManyNotices(where: NoticeWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createRepply(data: RepplyCreateInput!): Repply!
  updateRepply(data: RepplyUpdateInput!, where: RepplyWhereUniqueInput!): Repply
  updateManyRepplies(data: RepplyUpdateManyMutationInput!, where: RepplyWhereInput): BatchPayload!
  upsertRepply(where: RepplyWhereUniqueInput!, create: RepplyCreateInput!, update: RepplyUpdateInput!): Repply!
  deleteRepply(where: RepplyWhereUniqueInput!): Repply
  deleteManyRepplies(where: RepplyWhereInput): BatchPayload!
  createRoom(data: RoomCreateInput!): Room!
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  upsertRoom(where: RoomWhereUniqueInput!, create: RoomCreateInput!, update: RoomUpdateInput!): Room!
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deleteManyRooms(where: RoomWhereInput): BatchPayload!
  createSuggestion(data: SuggestionCreateInput!): Suggestion!
  updateSuggestion(data: SuggestionUpdateInput!, where: SuggestionWhereUniqueInput!): Suggestion
  updateManySuggestions(data: SuggestionUpdateManyMutationInput!, where: SuggestionWhereInput): BatchPayload!
  upsertSuggestion(where: SuggestionWhereUniqueInput!, create: SuggestionCreateInput!, update: SuggestionUpdateInput!): Suggestion!
  deleteSuggestion(where: SuggestionWhereUniqueInput!): Suggestion
  deleteManySuggestions(where: SuggestionWhereInput): BatchPayload!
  createTalk(data: TalkCreateInput!): Talk!
  updateTalk(data: TalkUpdateInput!, where: TalkWhereUniqueInput!): Talk
  updateManyTalks(data: TalkUpdateManyMutationInput!, where: TalkWhereInput): BatchPayload!
  upsertTalk(where: TalkWhereUniqueInput!, create: TalkCreateInput!, update: TalkUpdateInput!): Talk!
  deleteTalk(where: TalkWhereUniqueInput!): Talk
  deleteManyTalks(where: TalkWhereInput): BatchPayload!
  createTalkComment(data: TalkCommentCreateInput!): TalkComment!
  updateTalkComment(data: TalkCommentUpdateInput!, where: TalkCommentWhereUniqueInput!): TalkComment
  updateManyTalkComments(data: TalkCommentUpdateManyMutationInput!, where: TalkCommentWhereInput): BatchPayload!
  upsertTalkComment(where: TalkCommentWhereUniqueInput!, create: TalkCommentCreateInput!, update: TalkCommentUpdateInput!): TalkComment!
  deleteTalkComment(where: TalkCommentWhereUniqueInput!): TalkComment
  deleteManyTalkComments(where: TalkCommentWhereInput): BatchPayload!
  createTalkRepply(data: TalkRepplyCreateInput!): TalkRepply!
  updateTalkRepply(data: TalkRepplyUpdateInput!, where: TalkRepplyWhereUniqueInput!): TalkRepply
  updateManyTalkRepplies(data: TalkRepplyUpdateManyMutationInput!, where: TalkRepplyWhereInput): BatchPayload!
  upsertTalkRepply(where: TalkRepplyWhereUniqueInput!, create: TalkRepplyCreateInput!, update: TalkRepplyUpdateInput!): TalkRepply!
  deleteTalkRepply(where: TalkRepplyWhereUniqueInput!): TalkRepply
  deleteManyTalkRepplies(where: TalkRepplyWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Notice {
  id: ID!
  title: String!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NoticeConnection {
  pageInfo: PageInfo!
  edges: [NoticeEdge]!
  aggregate: AggregateNotice!
}

input NoticeCreateInput {
  id: ID
  title: String!
  text: String!
}

type NoticeEdge {
  node: Notice!
  cursor: String!
}

enum NoticeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NoticePreviousValues {
  id: ID!
  title: String!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NoticeSubscriptionPayload {
  mutation: MutationType!
  node: Notice
  updatedFields: [String!]
  previousValues: NoticePreviousValues
}

input NoticeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NoticeWhereInput
  AND: [NoticeSubscriptionWhereInput!]
  OR: [NoticeSubscriptionWhereInput!]
  NOT: [NoticeSubscriptionWhereInput!]
}

input NoticeUpdateInput {
  title: String
  text: String
}

input NoticeUpdateManyMutationInput {
  title: String
  text: String
}

input NoticeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [NoticeWhereInput!]
  OR: [NoticeWhereInput!]
  NOT: [NoticeWhereInput!]
}

input NoticeWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  caption: String!
  user: User
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  isLiked: Boolean
  likeCount: Int
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  repplies(where: RepplyWhereInput, orderBy: RepplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Repply!]
  commentCounts: Int
  postPrivate: Boolean!
  repplyCounts: Int
  assortment: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  caption: String!
  user: UserCreateOneWithoutPostsInput
  files: FileCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  isLiked: Boolean
  likeCount: Int
  comments: CommentCreateManyWithoutPostInput
  repplies: RepplyCreateManyWithoutPostInput
  commentCounts: Int
  postPrivate: Boolean!
  repplyCounts: Int
  assortment: String!
}

input PostCreateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutFilesInput {
  create: PostCreateWithoutFilesInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutReppliesInput {
  create: PostCreateWithoutReppliesInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutCommentsInput {
  id: ID
  title: String!
  caption: String!
  user: UserCreateOneWithoutPostsInput
  files: FileCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  isLiked: Boolean
  likeCount: Int
  repplies: RepplyCreateManyWithoutPostInput
  commentCounts: Int
  postPrivate: Boolean!
  repplyCounts: Int
  assortment: String!
}

input PostCreateWithoutFilesInput {
  id: ID
  title: String!
  caption: String!
  user: UserCreateOneWithoutPostsInput
  likes: LikeCreateManyWithoutPostInput
  isLiked: Boolean
  likeCount: Int
  comments: CommentCreateManyWithoutPostInput
  repplies: RepplyCreateManyWithoutPostInput
  commentCounts: Int
  postPrivate: Boolean!
  repplyCounts: Int
  assortment: String!
}

input PostCreateWithoutLikesInput {
  id: ID
  title: String!
  caption: String!
  user: UserCreateOneWithoutPostsInput
  files: FileCreateManyWithoutPostInput
  isLiked: Boolean
  likeCount: Int
  comments: CommentCreateManyWithoutPostInput
  repplies: RepplyCreateManyWithoutPostInput
  commentCounts: Int
  postPrivate: Boolean!
  repplyCounts: Int
  assortment: String!
}

input PostCreateWithoutReppliesInput {
  id: ID
  title: String!
  caption: String!
  user: UserCreateOneWithoutPostsInput
  files: FileCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  isLiked: Boolean
  likeCount: Int
  comments: CommentCreateManyWithoutPostInput
  commentCounts: Int
  postPrivate: Boolean!
  repplyCounts: Int
  assortment: String!
}

input PostCreateWithoutUserInput {
  id: ID
  title: String!
  caption: String!
  files: FileCreateManyWithoutPostInput
  likes: LikeCreateManyWithoutPostInput
  isLiked: Boolean
  likeCount: Int
  comments: CommentCreateManyWithoutPostInput
  repplies: RepplyCreateManyWithoutPostInput
  commentCounts: Int
  postPrivate: Boolean!
  repplyCounts: Int
  assortment: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  caption_ASC
  caption_DESC
  isLiked_ASC
  isLiked_DESC
  likeCount_ASC
  likeCount_DESC
  commentCounts_ASC
  commentCounts_DESC
  postPrivate_ASC
  postPrivate_DESC
  repplyCounts_ASC
  repplyCounts_DESC
  assortment_ASC
  assortment_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  caption: String!
  isLiked: Boolean
  likeCount: Int
  commentCounts: Int
  postPrivate: Boolean!
  repplyCounts: Int
  assortment: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  isLiked: Boolean
  isLiked_not: Boolean
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  commentCounts: Int
  commentCounts_not: Int
  commentCounts_in: [Int!]
  commentCounts_not_in: [Int!]
  commentCounts_lt: Int
  commentCounts_lte: Int
  commentCounts_gt: Int
  commentCounts_gte: Int
  postPrivate: Boolean
  postPrivate_not: Boolean
  repplyCounts: Int
  repplyCounts_not: Int
  repplyCounts_in: [Int!]
  repplyCounts_not_in: [Int!]
  repplyCounts_lt: Int
  repplyCounts_lte: Int
  repplyCounts_gt: Int
  repplyCounts_gte: Int
  assortment: String
  assortment_not: String
  assortment_in: [String!]
  assortment_not_in: [String!]
  assortment_lt: String
  assortment_lte: String
  assortment_gt: String
  assortment_gte: String
  assortment_contains: String
  assortment_not_contains: String
  assortment_starts_with: String
  assortment_not_starts_with: String
  assortment_ends_with: String
  assortment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  caption: String
  user: UserUpdateOneWithoutPostsInput
  files: FileUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  isLiked: Boolean
  likeCount: Int
  comments: CommentUpdateManyWithoutPostInput
  repplies: RepplyUpdateManyWithoutPostInput
  commentCounts: Int
  postPrivate: Boolean
  repplyCounts: Int
  assortment: String
}

input PostUpdateManyDataInput {
  title: String
  caption: String
  isLiked: Boolean
  likeCount: Int
  commentCounts: Int
  postPrivate: Boolean
  repplyCounts: Int
  assortment: String
}

input PostUpdateManyMutationInput {
  title: String
  caption: String
  isLiked: Boolean
  likeCount: Int
  commentCounts: Int
  postPrivate: Boolean
  repplyCounts: Int
  assortment: String
}

input PostUpdateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateOneRequiredWithoutReppliesInput {
  create: PostCreateWithoutReppliesInput
  update: PostUpdateWithoutReppliesDataInput
  upsert: PostUpsertWithoutReppliesInput
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutFilesInput {
  create: PostCreateWithoutFilesInput
  update: PostUpdateWithoutFilesDataInput
  upsert: PostUpsertWithoutFilesInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateOneWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  update: PostUpdateWithoutLikesDataInput
  upsert: PostUpsertWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutCommentsDataInput {
  title: String
  caption: String
  user: UserUpdateOneWithoutPostsInput
  files: FileUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  isLiked: Boolean
  likeCount: Int
  repplies: RepplyUpdateManyWithoutPostInput
  commentCounts: Int
  postPrivate: Boolean
  repplyCounts: Int
  assortment: String
}

input PostUpdateWithoutFilesDataInput {
  title: String
  caption: String
  user: UserUpdateOneWithoutPostsInput
  likes: LikeUpdateManyWithoutPostInput
  isLiked: Boolean
  likeCount: Int
  comments: CommentUpdateManyWithoutPostInput
  repplies: RepplyUpdateManyWithoutPostInput
  commentCounts: Int
  postPrivate: Boolean
  repplyCounts: Int
  assortment: String
}

input PostUpdateWithoutLikesDataInput {
  title: String
  caption: String
  user: UserUpdateOneWithoutPostsInput
  files: FileUpdateManyWithoutPostInput
  isLiked: Boolean
  likeCount: Int
  comments: CommentUpdateManyWithoutPostInput
  repplies: RepplyUpdateManyWithoutPostInput
  commentCounts: Int
  postPrivate: Boolean
  repplyCounts: Int
  assortment: String
}

input PostUpdateWithoutReppliesDataInput {
  title: String
  caption: String
  user: UserUpdateOneWithoutPostsInput
  files: FileUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  isLiked: Boolean
  likeCount: Int
  comments: CommentUpdateManyWithoutPostInput
  commentCounts: Int
  postPrivate: Boolean
  repplyCounts: Int
  assortment: String
}

input PostUpdateWithoutUserDataInput {
  title: String
  caption: String
  files: FileUpdateManyWithoutPostInput
  likes: LikeUpdateManyWithoutPostInput
  isLiked: Boolean
  likeCount: Int
  comments: CommentUpdateManyWithoutPostInput
  repplies: RepplyUpdateManyWithoutPostInput
  commentCounts: Int
  postPrivate: Boolean
  repplyCounts: Int
  assortment: String
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUserDataInput!
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithoutFilesInput {
  update: PostUpdateWithoutFilesDataInput!
  create: PostCreateWithoutFilesInput!
}

input PostUpsertWithoutLikesInput {
  update: PostUpdateWithoutLikesDataInput!
  create: PostCreateWithoutLikesInput!
}

input PostUpsertWithoutReppliesInput {
  update: PostUpdateWithoutReppliesDataInput!
  create: PostCreateWithoutReppliesInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUserDataInput!
  create: PostCreateWithoutUserInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  caption: String
  caption_not: String
  caption_in: [String!]
  caption_not_in: [String!]
  caption_lt: String
  caption_lte: String
  caption_gt: String
  caption_gte: String
  caption_contains: String
  caption_not_contains: String
  caption_starts_with: String
  caption_not_starts_with: String
  caption_ends_with: String
  caption_not_ends_with: String
  user: UserWhereInput
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  isLiked: Boolean
  isLiked_not: Boolean
  likeCount: Int
  likeCount_not: Int
  likeCount_in: [Int!]
  likeCount_not_in: [Int!]
  likeCount_lt: Int
  likeCount_lte: Int
  likeCount_gt: Int
  likeCount_gte: Int
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  repplies_every: RepplyWhereInput
  repplies_some: RepplyWhereInput
  repplies_none: RepplyWhereInput
  commentCounts: Int
  commentCounts_not: Int
  commentCounts_in: [Int!]
  commentCounts_not_in: [Int!]
  commentCounts_lt: Int
  commentCounts_lte: Int
  commentCounts_gt: Int
  commentCounts_gte: Int
  postPrivate: Boolean
  postPrivate_not: Boolean
  repplyCounts: Int
  repplyCounts_not: Int
  repplyCounts_in: [Int!]
  repplyCounts_not_in: [Int!]
  repplyCounts_lt: Int
  repplyCounts_lte: Int
  repplyCounts_gt: Int
  repplyCounts_gte: Int
  assortment: String
  assortment_not: String
  assortment_in: [String!]
  assortment_not_in: [String!]
  assortment_lt: String
  assortment_lte: String
  assortment_gt: String
  assortment_gte: String
  assortment_contains: String
  assortment_not_contains: String
  assortment_starts_with: String
  assortment_not_starts_with: String
  assortment_ends_with: String
  assortment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  like(where: LikeWhereUniqueInput!): Like
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like]!
  likesConnection(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  notice(where: NoticeWhereUniqueInput!): Notice
  notices(where: NoticeWhereInput, orderBy: NoticeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notice]!
  noticesConnection(where: NoticeWhereInput, orderBy: NoticeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoticeConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  repply(where: RepplyWhereUniqueInput!): Repply
  repplies(where: RepplyWhereInput, orderBy: RepplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Repply]!
  reppliesConnection(where: RepplyWhereInput, orderBy: RepplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RepplyConnection!
  room(where: RoomWhereUniqueInput!): Room
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room]!
  roomsConnection(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoomConnection!
  suggestion(where: SuggestionWhereUniqueInput!): Suggestion
  suggestions(where: SuggestionWhereInput, orderBy: SuggestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suggestion]!
  suggestionsConnection(where: SuggestionWhereInput, orderBy: SuggestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SuggestionConnection!
  talk(where: TalkWhereUniqueInput!): Talk
  talks(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Talk]!
  talksConnection(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TalkConnection!
  talkComment(where: TalkCommentWhereUniqueInput!): TalkComment
  talkComments(where: TalkCommentWhereInput, orderBy: TalkCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TalkComment]!
  talkCommentsConnection(where: TalkCommentWhereInput, orderBy: TalkCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TalkCommentConnection!
  talkRepply(where: TalkRepplyWhereUniqueInput!): TalkRepply
  talkRepplies(where: TalkRepplyWhereInput, orderBy: TalkRepplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TalkRepply]!
  talkReppliesConnection(where: TalkRepplyWhereInput, orderBy: TalkRepplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TalkRepplyConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Repply {
  id: ID!
  text: String!
  user: User
  comment: Comment!
  post: Post!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RepplyConnection {
  pageInfo: PageInfo!
  edges: [RepplyEdge]!
  aggregate: AggregateRepply!
}

input RepplyCreateInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutReppliesInput
  comment: CommentCreateOneWithoutRepplyInput!
  post: PostCreateOneWithoutReppliesInput!
}

input RepplyCreateManyWithoutCommentInput {
  create: [RepplyCreateWithoutCommentInput!]
  connect: [RepplyWhereUniqueInput!]
}

input RepplyCreateManyWithoutPostInput {
  create: [RepplyCreateWithoutPostInput!]
  connect: [RepplyWhereUniqueInput!]
}

input RepplyCreateManyWithoutUserInput {
  create: [RepplyCreateWithoutUserInput!]
  connect: [RepplyWhereUniqueInput!]
}

input RepplyCreateWithoutCommentInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutReppliesInput
  post: PostCreateOneWithoutReppliesInput!
}

input RepplyCreateWithoutPostInput {
  id: ID
  text: String!
  user: UserCreateOneWithoutReppliesInput
  comment: CommentCreateOneWithoutRepplyInput!
}

input RepplyCreateWithoutUserInput {
  id: ID
  text: String!
  comment: CommentCreateOneWithoutRepplyInput!
  post: PostCreateOneWithoutReppliesInput!
}

type RepplyEdge {
  node: Repply!
  cursor: String!
}

enum RepplyOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RepplyPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RepplyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RepplyScalarWhereInput!]
  OR: [RepplyScalarWhereInput!]
  NOT: [RepplyScalarWhereInput!]
}

type RepplySubscriptionPayload {
  mutation: MutationType!
  node: Repply
  updatedFields: [String!]
  previousValues: RepplyPreviousValues
}

input RepplySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RepplyWhereInput
  AND: [RepplySubscriptionWhereInput!]
  OR: [RepplySubscriptionWhereInput!]
  NOT: [RepplySubscriptionWhereInput!]
}

input RepplyUpdateInput {
  text: String
  user: UserUpdateOneWithoutReppliesInput
  comment: CommentUpdateOneRequiredWithoutRepplyInput
  post: PostUpdateOneRequiredWithoutReppliesInput
}

input RepplyUpdateManyDataInput {
  text: String
}

input RepplyUpdateManyMutationInput {
  text: String
}

input RepplyUpdateManyWithoutCommentInput {
  create: [RepplyCreateWithoutCommentInput!]
  delete: [RepplyWhereUniqueInput!]
  connect: [RepplyWhereUniqueInput!]
  set: [RepplyWhereUniqueInput!]
  disconnect: [RepplyWhereUniqueInput!]
  update: [RepplyUpdateWithWhereUniqueWithoutCommentInput!]
  upsert: [RepplyUpsertWithWhereUniqueWithoutCommentInput!]
  deleteMany: [RepplyScalarWhereInput!]
  updateMany: [RepplyUpdateManyWithWhereNestedInput!]
}

input RepplyUpdateManyWithoutPostInput {
  create: [RepplyCreateWithoutPostInput!]
  delete: [RepplyWhereUniqueInput!]
  connect: [RepplyWhereUniqueInput!]
  set: [RepplyWhereUniqueInput!]
  disconnect: [RepplyWhereUniqueInput!]
  update: [RepplyUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [RepplyUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [RepplyScalarWhereInput!]
  updateMany: [RepplyUpdateManyWithWhereNestedInput!]
}

input RepplyUpdateManyWithoutUserInput {
  create: [RepplyCreateWithoutUserInput!]
  delete: [RepplyWhereUniqueInput!]
  connect: [RepplyWhereUniqueInput!]
  set: [RepplyWhereUniqueInput!]
  disconnect: [RepplyWhereUniqueInput!]
  update: [RepplyUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [RepplyUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [RepplyScalarWhereInput!]
  updateMany: [RepplyUpdateManyWithWhereNestedInput!]
}

input RepplyUpdateManyWithWhereNestedInput {
  where: RepplyScalarWhereInput!
  data: RepplyUpdateManyDataInput!
}

input RepplyUpdateWithoutCommentDataInput {
  text: String
  user: UserUpdateOneWithoutReppliesInput
  post: PostUpdateOneRequiredWithoutReppliesInput
}

input RepplyUpdateWithoutPostDataInput {
  text: String
  user: UserUpdateOneWithoutReppliesInput
  comment: CommentUpdateOneRequiredWithoutRepplyInput
}

input RepplyUpdateWithoutUserDataInput {
  text: String
  comment: CommentUpdateOneRequiredWithoutRepplyInput
  post: PostUpdateOneRequiredWithoutReppliesInput
}

input RepplyUpdateWithWhereUniqueWithoutCommentInput {
  where: RepplyWhereUniqueInput!
  data: RepplyUpdateWithoutCommentDataInput!
}

input RepplyUpdateWithWhereUniqueWithoutPostInput {
  where: RepplyWhereUniqueInput!
  data: RepplyUpdateWithoutPostDataInput!
}

input RepplyUpdateWithWhereUniqueWithoutUserInput {
  where: RepplyWhereUniqueInput!
  data: RepplyUpdateWithoutUserDataInput!
}

input RepplyUpsertWithWhereUniqueWithoutCommentInput {
  where: RepplyWhereUniqueInput!
  update: RepplyUpdateWithoutCommentDataInput!
  create: RepplyCreateWithoutCommentInput!
}

input RepplyUpsertWithWhereUniqueWithoutPostInput {
  where: RepplyWhereUniqueInput!
  update: RepplyUpdateWithoutPostDataInput!
  create: RepplyCreateWithoutPostInput!
}

input RepplyUpsertWithWhereUniqueWithoutUserInput {
  where: RepplyWhereUniqueInput!
  update: RepplyUpdateWithoutUserDataInput!
  create: RepplyCreateWithoutUserInput!
}

input RepplyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  user: UserWhereInput
  comment: CommentWhereInput
  post: PostWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RepplyWhereInput!]
  OR: [RepplyWhereInput!]
  NOT: [RepplyWhereInput!]
}

input RepplyWhereUniqueInput {
  id: ID
}

type Room {
  id: ID!
  participants(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RoomConnection {
  pageInfo: PageInfo!
  edges: [RoomEdge]!
  aggregate: AggregateRoom!
}

input RoomCreateInput {
  id: ID
  participants: UserCreateManyWithoutRoomsInput
  messages: MessageCreateManyWithoutRoomInput
}

input RoomCreateManyWithoutParticipantsInput {
  create: [RoomCreateWithoutParticipantsInput!]
  connect: [RoomWhereUniqueInput!]
}

input RoomCreateOneWithoutMessagesInput {
  create: RoomCreateWithoutMessagesInput
  connect: RoomWhereUniqueInput
}

input RoomCreateWithoutMessagesInput {
  id: ID
  participants: UserCreateManyWithoutRoomsInput
}

input RoomCreateWithoutParticipantsInput {
  id: ID
  messages: MessageCreateManyWithoutRoomInput
}

type RoomEdge {
  node: Room!
  cursor: String!
}

enum RoomOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RoomPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RoomScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RoomScalarWhereInput!]
  OR: [RoomScalarWhereInput!]
  NOT: [RoomScalarWhereInput!]
}

type RoomSubscriptionPayload {
  mutation: MutationType!
  node: Room
  updatedFields: [String!]
  previousValues: RoomPreviousValues
}

input RoomSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoomWhereInput
  AND: [RoomSubscriptionWhereInput!]
  OR: [RoomSubscriptionWhereInput!]
  NOT: [RoomSubscriptionWhereInput!]
}

input RoomUpdateInput {
  participants: UserUpdateManyWithoutRoomsInput
  messages: MessageUpdateManyWithoutRoomInput
}

input RoomUpdateManyWithoutParticipantsInput {
  create: [RoomCreateWithoutParticipantsInput!]
  delete: [RoomWhereUniqueInput!]
  connect: [RoomWhereUniqueInput!]
  set: [RoomWhereUniqueInput!]
  disconnect: [RoomWhereUniqueInput!]
  update: [RoomUpdateWithWhereUniqueWithoutParticipantsInput!]
  upsert: [RoomUpsertWithWhereUniqueWithoutParticipantsInput!]
  deleteMany: [RoomScalarWhereInput!]
}

input RoomUpdateOneRequiredWithoutMessagesInput {
  create: RoomCreateWithoutMessagesInput
  update: RoomUpdateWithoutMessagesDataInput
  upsert: RoomUpsertWithoutMessagesInput
  connect: RoomWhereUniqueInput
}

input RoomUpdateWithoutMessagesDataInput {
  participants: UserUpdateManyWithoutRoomsInput
}

input RoomUpdateWithoutParticipantsDataInput {
  messages: MessageUpdateManyWithoutRoomInput
}

input RoomUpdateWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput!
  data: RoomUpdateWithoutParticipantsDataInput!
}

input RoomUpsertWithoutMessagesInput {
  update: RoomUpdateWithoutMessagesDataInput!
  create: RoomCreateWithoutMessagesInput!
}

input RoomUpsertWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput!
  update: RoomUpdateWithoutParticipantsDataInput!
  create: RoomCreateWithoutParticipantsInput!
}

input RoomWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  participants_every: UserWhereInput
  participants_some: UserWhereInput
  participants_none: UserWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  NOT: [RoomWhereInput!]
}

input RoomWhereUniqueInput {
  id: ID
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  like(where: LikeSubscriptionWhereInput): LikeSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  notice(where: NoticeSubscriptionWhereInput): NoticeSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  repply(where: RepplySubscriptionWhereInput): RepplySubscriptionPayload
  room(where: RoomSubscriptionWhereInput): RoomSubscriptionPayload
  suggestion(where: SuggestionSubscriptionWhereInput): SuggestionSubscriptionPayload
  talk(where: TalkSubscriptionWhereInput): TalkSubscriptionPayload
  talkComment(where: TalkCommentSubscriptionWhereInput): TalkCommentSubscriptionPayload
  talkRepply(where: TalkRepplySubscriptionWhereInput): TalkRepplySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Suggestion {
  id: ID!
  user: User!
  text: String!
  image: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SuggestionConnection {
  pageInfo: PageInfo!
  edges: [SuggestionEdge]!
  aggregate: AggregateSuggestion!
}

input SuggestionCreateInput {
  id: ID
  user: UserCreateOneWithoutSuggestionsInput!
  text: String!
  image: String
}

input SuggestionCreateManyWithoutUserInput {
  create: [SuggestionCreateWithoutUserInput!]
  connect: [SuggestionWhereUniqueInput!]
}

input SuggestionCreateWithoutUserInput {
  id: ID
  text: String!
  image: String
}

type SuggestionEdge {
  node: Suggestion!
  cursor: String!
}

enum SuggestionOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  image_ASC
  image_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SuggestionPreviousValues {
  id: ID!
  text: String!
  image: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SuggestionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SuggestionScalarWhereInput!]
  OR: [SuggestionScalarWhereInput!]
  NOT: [SuggestionScalarWhereInput!]
}

type SuggestionSubscriptionPayload {
  mutation: MutationType!
  node: Suggestion
  updatedFields: [String!]
  previousValues: SuggestionPreviousValues
}

input SuggestionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SuggestionWhereInput
  AND: [SuggestionSubscriptionWhereInput!]
  OR: [SuggestionSubscriptionWhereInput!]
  NOT: [SuggestionSubscriptionWhereInput!]
}

input SuggestionUpdateInput {
  user: UserUpdateOneRequiredWithoutSuggestionsInput
  text: String
  image: String
}

input SuggestionUpdateManyDataInput {
  text: String
  image: String
}

input SuggestionUpdateManyMutationInput {
  text: String
  image: String
}

input SuggestionUpdateManyWithoutUserInput {
  create: [SuggestionCreateWithoutUserInput!]
  delete: [SuggestionWhereUniqueInput!]
  connect: [SuggestionWhereUniqueInput!]
  set: [SuggestionWhereUniqueInput!]
  disconnect: [SuggestionWhereUniqueInput!]
  update: [SuggestionUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [SuggestionUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [SuggestionScalarWhereInput!]
  updateMany: [SuggestionUpdateManyWithWhereNestedInput!]
}

input SuggestionUpdateManyWithWhereNestedInput {
  where: SuggestionScalarWhereInput!
  data: SuggestionUpdateManyDataInput!
}

input SuggestionUpdateWithoutUserDataInput {
  text: String
  image: String
}

input SuggestionUpdateWithWhereUniqueWithoutUserInput {
  where: SuggestionWhereUniqueInput!
  data: SuggestionUpdateWithoutUserDataInput!
}

input SuggestionUpsertWithWhereUniqueWithoutUserInput {
  where: SuggestionWhereUniqueInput!
  update: SuggestionUpdateWithoutUserDataInput!
  create: SuggestionCreateWithoutUserInput!
}

input SuggestionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SuggestionWhereInput!]
  OR: [SuggestionWhereInput!]
  NOT: [SuggestionWhereInput!]
}

input SuggestionWhereUniqueInput {
  id: ID
}

type Talk {
  id: ID!
  user: User!
  talkComments(where: TalkCommentWhereInput, orderBy: TalkCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TalkComment!]
  talkRepplies(where: TalkRepplyWhereInput, orderBy: TalkRepplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TalkRepply!]
  talkCommentCounts: Int
  talkRepplyCounts: Int
  talkText: String!
  division: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TalkComment {
  id: ID!
  user: User
  talk: Talk!
  text: String!
  talkRepplies(where: TalkRepplyWhereInput, orderBy: TalkRepplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TalkRepply!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TalkCommentConnection {
  pageInfo: PageInfo!
  edges: [TalkCommentEdge]!
  aggregate: AggregateTalkComment!
}

input TalkCommentCreateInput {
  id: ID
  user: UserCreateOneWithoutTalkCommentsInput
  talk: TalkCreateOneWithoutTalkCommentsInput!
  text: String!
  talkRepplies: TalkRepplyCreateManyWithoutTalkCommentInput
}

input TalkCommentCreateManyWithoutTalkInput {
  create: [TalkCommentCreateWithoutTalkInput!]
  connect: [TalkCommentWhereUniqueInput!]
}

input TalkCommentCreateManyWithoutUserInput {
  create: [TalkCommentCreateWithoutUserInput!]
  connect: [TalkCommentWhereUniqueInput!]
}

input TalkCommentCreateOneWithoutTalkReppliesInput {
  create: TalkCommentCreateWithoutTalkReppliesInput
  connect: TalkCommentWhereUniqueInput
}

input TalkCommentCreateWithoutTalkInput {
  id: ID
  user: UserCreateOneWithoutTalkCommentsInput
  text: String!
  talkRepplies: TalkRepplyCreateManyWithoutTalkCommentInput
}

input TalkCommentCreateWithoutTalkReppliesInput {
  id: ID
  user: UserCreateOneWithoutTalkCommentsInput
  talk: TalkCreateOneWithoutTalkCommentsInput!
  text: String!
}

input TalkCommentCreateWithoutUserInput {
  id: ID
  talk: TalkCreateOneWithoutTalkCommentsInput!
  text: String!
  talkRepplies: TalkRepplyCreateManyWithoutTalkCommentInput
}

type TalkCommentEdge {
  node: TalkComment!
  cursor: String!
}

enum TalkCommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TalkCommentPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TalkCommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TalkCommentScalarWhereInput!]
  OR: [TalkCommentScalarWhereInput!]
  NOT: [TalkCommentScalarWhereInput!]
}

type TalkCommentSubscriptionPayload {
  mutation: MutationType!
  node: TalkComment
  updatedFields: [String!]
  previousValues: TalkCommentPreviousValues
}

input TalkCommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TalkCommentWhereInput
  AND: [TalkCommentSubscriptionWhereInput!]
  OR: [TalkCommentSubscriptionWhereInput!]
  NOT: [TalkCommentSubscriptionWhereInput!]
}

input TalkCommentUpdateInput {
  user: UserUpdateOneWithoutTalkCommentsInput
  talk: TalkUpdateOneRequiredWithoutTalkCommentsInput
  text: String
  talkRepplies: TalkRepplyUpdateManyWithoutTalkCommentInput
}

input TalkCommentUpdateManyDataInput {
  text: String
}

input TalkCommentUpdateManyMutationInput {
  text: String
}

input TalkCommentUpdateManyWithoutTalkInput {
  create: [TalkCommentCreateWithoutTalkInput!]
  delete: [TalkCommentWhereUniqueInput!]
  connect: [TalkCommentWhereUniqueInput!]
  set: [TalkCommentWhereUniqueInput!]
  disconnect: [TalkCommentWhereUniqueInput!]
  update: [TalkCommentUpdateWithWhereUniqueWithoutTalkInput!]
  upsert: [TalkCommentUpsertWithWhereUniqueWithoutTalkInput!]
  deleteMany: [TalkCommentScalarWhereInput!]
  updateMany: [TalkCommentUpdateManyWithWhereNestedInput!]
}

input TalkCommentUpdateManyWithoutUserInput {
  create: [TalkCommentCreateWithoutUserInput!]
  delete: [TalkCommentWhereUniqueInput!]
  connect: [TalkCommentWhereUniqueInput!]
  set: [TalkCommentWhereUniqueInput!]
  disconnect: [TalkCommentWhereUniqueInput!]
  update: [TalkCommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TalkCommentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TalkCommentScalarWhereInput!]
  updateMany: [TalkCommentUpdateManyWithWhereNestedInput!]
}

input TalkCommentUpdateManyWithWhereNestedInput {
  where: TalkCommentScalarWhereInput!
  data: TalkCommentUpdateManyDataInput!
}

input TalkCommentUpdateOneRequiredWithoutTalkReppliesInput {
  create: TalkCommentCreateWithoutTalkReppliesInput
  update: TalkCommentUpdateWithoutTalkReppliesDataInput
  upsert: TalkCommentUpsertWithoutTalkReppliesInput
  connect: TalkCommentWhereUniqueInput
}

input TalkCommentUpdateWithoutTalkDataInput {
  user: UserUpdateOneWithoutTalkCommentsInput
  text: String
  talkRepplies: TalkRepplyUpdateManyWithoutTalkCommentInput
}

input TalkCommentUpdateWithoutTalkReppliesDataInput {
  user: UserUpdateOneWithoutTalkCommentsInput
  talk: TalkUpdateOneRequiredWithoutTalkCommentsInput
  text: String
}

input TalkCommentUpdateWithoutUserDataInput {
  talk: TalkUpdateOneRequiredWithoutTalkCommentsInput
  text: String
  talkRepplies: TalkRepplyUpdateManyWithoutTalkCommentInput
}

input TalkCommentUpdateWithWhereUniqueWithoutTalkInput {
  where: TalkCommentWhereUniqueInput!
  data: TalkCommentUpdateWithoutTalkDataInput!
}

input TalkCommentUpdateWithWhereUniqueWithoutUserInput {
  where: TalkCommentWhereUniqueInput!
  data: TalkCommentUpdateWithoutUserDataInput!
}

input TalkCommentUpsertWithoutTalkReppliesInput {
  update: TalkCommentUpdateWithoutTalkReppliesDataInput!
  create: TalkCommentCreateWithoutTalkReppliesInput!
}

input TalkCommentUpsertWithWhereUniqueWithoutTalkInput {
  where: TalkCommentWhereUniqueInput!
  update: TalkCommentUpdateWithoutTalkDataInput!
  create: TalkCommentCreateWithoutTalkInput!
}

input TalkCommentUpsertWithWhereUniqueWithoutUserInput {
  where: TalkCommentWhereUniqueInput!
  update: TalkCommentUpdateWithoutUserDataInput!
  create: TalkCommentCreateWithoutUserInput!
}

input TalkCommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  talk: TalkWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  talkRepplies_every: TalkRepplyWhereInput
  talkRepplies_some: TalkRepplyWhereInput
  talkRepplies_none: TalkRepplyWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TalkCommentWhereInput!]
  OR: [TalkCommentWhereInput!]
  NOT: [TalkCommentWhereInput!]
}

input TalkCommentWhereUniqueInput {
  id: ID
}

type TalkConnection {
  pageInfo: PageInfo!
  edges: [TalkEdge]!
  aggregate: AggregateTalk!
}

input TalkCreateInput {
  id: ID
  user: UserCreateOneWithoutTalksInput!
  talkComments: TalkCommentCreateManyWithoutTalkInput
  talkRepplies: TalkRepplyCreateManyWithoutTalkInput
  talkCommentCounts: Int
  talkRepplyCounts: Int
  talkText: String!
  division: String!
}

input TalkCreateManyWithoutUserInput {
  create: [TalkCreateWithoutUserInput!]
  connect: [TalkWhereUniqueInput!]
}

input TalkCreateOneWithoutTalkCommentsInput {
  create: TalkCreateWithoutTalkCommentsInput
  connect: TalkWhereUniqueInput
}

input TalkCreateOneWithoutTalkReppliesInput {
  create: TalkCreateWithoutTalkReppliesInput
  connect: TalkWhereUniqueInput
}

input TalkCreateWithoutTalkCommentsInput {
  id: ID
  user: UserCreateOneWithoutTalksInput!
  talkRepplies: TalkRepplyCreateManyWithoutTalkInput
  talkCommentCounts: Int
  talkRepplyCounts: Int
  talkText: String!
  division: String!
}

input TalkCreateWithoutTalkReppliesInput {
  id: ID
  user: UserCreateOneWithoutTalksInput!
  talkComments: TalkCommentCreateManyWithoutTalkInput
  talkCommentCounts: Int
  talkRepplyCounts: Int
  talkText: String!
  division: String!
}

input TalkCreateWithoutUserInput {
  id: ID
  talkComments: TalkCommentCreateManyWithoutTalkInput
  talkRepplies: TalkRepplyCreateManyWithoutTalkInput
  talkCommentCounts: Int
  talkRepplyCounts: Int
  talkText: String!
  division: String!
}

type TalkEdge {
  node: Talk!
  cursor: String!
}

enum TalkOrderByInput {
  id_ASC
  id_DESC
  talkCommentCounts_ASC
  talkCommentCounts_DESC
  talkRepplyCounts_ASC
  talkRepplyCounts_DESC
  talkText_ASC
  talkText_DESC
  division_ASC
  division_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TalkPreviousValues {
  id: ID!
  talkCommentCounts: Int
  talkRepplyCounts: Int
  talkText: String!
  division: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TalkRepply {
  id: ID!
  user: User
  talkComment: TalkComment!
  talk: Talk!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TalkRepplyConnection {
  pageInfo: PageInfo!
  edges: [TalkRepplyEdge]!
  aggregate: AggregateTalkRepply!
}

input TalkRepplyCreateInput {
  id: ID
  user: UserCreateOneWithoutTalkReppliesInput
  talkComment: TalkCommentCreateOneWithoutTalkReppliesInput!
  talk: TalkCreateOneWithoutTalkReppliesInput!
  text: String!
}

input TalkRepplyCreateManyWithoutTalkCommentInput {
  create: [TalkRepplyCreateWithoutTalkCommentInput!]
  connect: [TalkRepplyWhereUniqueInput!]
}

input TalkRepplyCreateManyWithoutTalkInput {
  create: [TalkRepplyCreateWithoutTalkInput!]
  connect: [TalkRepplyWhereUniqueInput!]
}

input TalkRepplyCreateManyWithoutUserInput {
  create: [TalkRepplyCreateWithoutUserInput!]
  connect: [TalkRepplyWhereUniqueInput!]
}

input TalkRepplyCreateWithoutTalkCommentInput {
  id: ID
  user: UserCreateOneWithoutTalkReppliesInput
  talk: TalkCreateOneWithoutTalkReppliesInput!
  text: String!
}

input TalkRepplyCreateWithoutTalkInput {
  id: ID
  user: UserCreateOneWithoutTalkReppliesInput
  talkComment: TalkCommentCreateOneWithoutTalkReppliesInput!
  text: String!
}

input TalkRepplyCreateWithoutUserInput {
  id: ID
  talkComment: TalkCommentCreateOneWithoutTalkReppliesInput!
  talk: TalkCreateOneWithoutTalkReppliesInput!
  text: String!
}

type TalkRepplyEdge {
  node: TalkRepply!
  cursor: String!
}

enum TalkRepplyOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TalkRepplyPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TalkRepplyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TalkRepplyScalarWhereInput!]
  OR: [TalkRepplyScalarWhereInput!]
  NOT: [TalkRepplyScalarWhereInput!]
}

type TalkRepplySubscriptionPayload {
  mutation: MutationType!
  node: TalkRepply
  updatedFields: [String!]
  previousValues: TalkRepplyPreviousValues
}

input TalkRepplySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TalkRepplyWhereInput
  AND: [TalkRepplySubscriptionWhereInput!]
  OR: [TalkRepplySubscriptionWhereInput!]
  NOT: [TalkRepplySubscriptionWhereInput!]
}

input TalkRepplyUpdateInput {
  user: UserUpdateOneWithoutTalkReppliesInput
  talkComment: TalkCommentUpdateOneRequiredWithoutTalkReppliesInput
  talk: TalkUpdateOneRequiredWithoutTalkReppliesInput
  text: String
}

input TalkRepplyUpdateManyDataInput {
  text: String
}

input TalkRepplyUpdateManyMutationInput {
  text: String
}

input TalkRepplyUpdateManyWithoutTalkCommentInput {
  create: [TalkRepplyCreateWithoutTalkCommentInput!]
  delete: [TalkRepplyWhereUniqueInput!]
  connect: [TalkRepplyWhereUniqueInput!]
  set: [TalkRepplyWhereUniqueInput!]
  disconnect: [TalkRepplyWhereUniqueInput!]
  update: [TalkRepplyUpdateWithWhereUniqueWithoutTalkCommentInput!]
  upsert: [TalkRepplyUpsertWithWhereUniqueWithoutTalkCommentInput!]
  deleteMany: [TalkRepplyScalarWhereInput!]
  updateMany: [TalkRepplyUpdateManyWithWhereNestedInput!]
}

input TalkRepplyUpdateManyWithoutTalkInput {
  create: [TalkRepplyCreateWithoutTalkInput!]
  delete: [TalkRepplyWhereUniqueInput!]
  connect: [TalkRepplyWhereUniqueInput!]
  set: [TalkRepplyWhereUniqueInput!]
  disconnect: [TalkRepplyWhereUniqueInput!]
  update: [TalkRepplyUpdateWithWhereUniqueWithoutTalkInput!]
  upsert: [TalkRepplyUpsertWithWhereUniqueWithoutTalkInput!]
  deleteMany: [TalkRepplyScalarWhereInput!]
  updateMany: [TalkRepplyUpdateManyWithWhereNestedInput!]
}

input TalkRepplyUpdateManyWithoutUserInput {
  create: [TalkRepplyCreateWithoutUserInput!]
  delete: [TalkRepplyWhereUniqueInput!]
  connect: [TalkRepplyWhereUniqueInput!]
  set: [TalkRepplyWhereUniqueInput!]
  disconnect: [TalkRepplyWhereUniqueInput!]
  update: [TalkRepplyUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TalkRepplyUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TalkRepplyScalarWhereInput!]
  updateMany: [TalkRepplyUpdateManyWithWhereNestedInput!]
}

input TalkRepplyUpdateManyWithWhereNestedInput {
  where: TalkRepplyScalarWhereInput!
  data: TalkRepplyUpdateManyDataInput!
}

input TalkRepplyUpdateWithoutTalkCommentDataInput {
  user: UserUpdateOneWithoutTalkReppliesInput
  talk: TalkUpdateOneRequiredWithoutTalkReppliesInput
  text: String
}

input TalkRepplyUpdateWithoutTalkDataInput {
  user: UserUpdateOneWithoutTalkReppliesInput
  talkComment: TalkCommentUpdateOneRequiredWithoutTalkReppliesInput
  text: String
}

input TalkRepplyUpdateWithoutUserDataInput {
  talkComment: TalkCommentUpdateOneRequiredWithoutTalkReppliesInput
  talk: TalkUpdateOneRequiredWithoutTalkReppliesInput
  text: String
}

input TalkRepplyUpdateWithWhereUniqueWithoutTalkCommentInput {
  where: TalkRepplyWhereUniqueInput!
  data: TalkRepplyUpdateWithoutTalkCommentDataInput!
}

input TalkRepplyUpdateWithWhereUniqueWithoutTalkInput {
  where: TalkRepplyWhereUniqueInput!
  data: TalkRepplyUpdateWithoutTalkDataInput!
}

input TalkRepplyUpdateWithWhereUniqueWithoutUserInput {
  where: TalkRepplyWhereUniqueInput!
  data: TalkRepplyUpdateWithoutUserDataInput!
}

input TalkRepplyUpsertWithWhereUniqueWithoutTalkCommentInput {
  where: TalkRepplyWhereUniqueInput!
  update: TalkRepplyUpdateWithoutTalkCommentDataInput!
  create: TalkRepplyCreateWithoutTalkCommentInput!
}

input TalkRepplyUpsertWithWhereUniqueWithoutTalkInput {
  where: TalkRepplyWhereUniqueInput!
  update: TalkRepplyUpdateWithoutTalkDataInput!
  create: TalkRepplyCreateWithoutTalkInput!
}

input TalkRepplyUpsertWithWhereUniqueWithoutUserInput {
  where: TalkRepplyWhereUniqueInput!
  update: TalkRepplyUpdateWithoutUserDataInput!
  create: TalkRepplyCreateWithoutUserInput!
}

input TalkRepplyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  talkComment: TalkCommentWhereInput
  talk: TalkWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TalkRepplyWhereInput!]
  OR: [TalkRepplyWhereInput!]
  NOT: [TalkRepplyWhereInput!]
}

input TalkRepplyWhereUniqueInput {
  id: ID
}

input TalkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  talkCommentCounts: Int
  talkCommentCounts_not: Int
  talkCommentCounts_in: [Int!]
  talkCommentCounts_not_in: [Int!]
  talkCommentCounts_lt: Int
  talkCommentCounts_lte: Int
  talkCommentCounts_gt: Int
  talkCommentCounts_gte: Int
  talkRepplyCounts: Int
  talkRepplyCounts_not: Int
  talkRepplyCounts_in: [Int!]
  talkRepplyCounts_not_in: [Int!]
  talkRepplyCounts_lt: Int
  talkRepplyCounts_lte: Int
  talkRepplyCounts_gt: Int
  talkRepplyCounts_gte: Int
  talkText: String
  talkText_not: String
  talkText_in: [String!]
  talkText_not_in: [String!]
  talkText_lt: String
  talkText_lte: String
  talkText_gt: String
  talkText_gte: String
  talkText_contains: String
  talkText_not_contains: String
  talkText_starts_with: String
  talkText_not_starts_with: String
  talkText_ends_with: String
  talkText_not_ends_with: String
  division: String
  division_not: String
  division_in: [String!]
  division_not_in: [String!]
  division_lt: String
  division_lte: String
  division_gt: String
  division_gte: String
  division_contains: String
  division_not_contains: String
  division_starts_with: String
  division_not_starts_with: String
  division_ends_with: String
  division_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TalkScalarWhereInput!]
  OR: [TalkScalarWhereInput!]
  NOT: [TalkScalarWhereInput!]
}

type TalkSubscriptionPayload {
  mutation: MutationType!
  node: Talk
  updatedFields: [String!]
  previousValues: TalkPreviousValues
}

input TalkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TalkWhereInput
  AND: [TalkSubscriptionWhereInput!]
  OR: [TalkSubscriptionWhereInput!]
  NOT: [TalkSubscriptionWhereInput!]
}

input TalkUpdateInput {
  user: UserUpdateOneRequiredWithoutTalksInput
  talkComments: TalkCommentUpdateManyWithoutTalkInput
  talkRepplies: TalkRepplyUpdateManyWithoutTalkInput
  talkCommentCounts: Int
  talkRepplyCounts: Int
  talkText: String
  division: String
}

input TalkUpdateManyDataInput {
  talkCommentCounts: Int
  talkRepplyCounts: Int
  talkText: String
  division: String
}

input TalkUpdateManyMutationInput {
  talkCommentCounts: Int
  talkRepplyCounts: Int
  talkText: String
  division: String
}

input TalkUpdateManyWithoutUserInput {
  create: [TalkCreateWithoutUserInput!]
  delete: [TalkWhereUniqueInput!]
  connect: [TalkWhereUniqueInput!]
  set: [TalkWhereUniqueInput!]
  disconnect: [TalkWhereUniqueInput!]
  update: [TalkUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TalkUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TalkScalarWhereInput!]
  updateMany: [TalkUpdateManyWithWhereNestedInput!]
}

input TalkUpdateManyWithWhereNestedInput {
  where: TalkScalarWhereInput!
  data: TalkUpdateManyDataInput!
}

input TalkUpdateOneRequiredWithoutTalkCommentsInput {
  create: TalkCreateWithoutTalkCommentsInput
  update: TalkUpdateWithoutTalkCommentsDataInput
  upsert: TalkUpsertWithoutTalkCommentsInput
  connect: TalkWhereUniqueInput
}

input TalkUpdateOneRequiredWithoutTalkReppliesInput {
  create: TalkCreateWithoutTalkReppliesInput
  update: TalkUpdateWithoutTalkReppliesDataInput
  upsert: TalkUpsertWithoutTalkReppliesInput
  connect: TalkWhereUniqueInput
}

input TalkUpdateWithoutTalkCommentsDataInput {
  user: UserUpdateOneRequiredWithoutTalksInput
  talkRepplies: TalkRepplyUpdateManyWithoutTalkInput
  talkCommentCounts: Int
  talkRepplyCounts: Int
  talkText: String
  division: String
}

input TalkUpdateWithoutTalkReppliesDataInput {
  user: UserUpdateOneRequiredWithoutTalksInput
  talkComments: TalkCommentUpdateManyWithoutTalkInput
  talkCommentCounts: Int
  talkRepplyCounts: Int
  talkText: String
  division: String
}

input TalkUpdateWithoutUserDataInput {
  talkComments: TalkCommentUpdateManyWithoutTalkInput
  talkRepplies: TalkRepplyUpdateManyWithoutTalkInput
  talkCommentCounts: Int
  talkRepplyCounts: Int
  talkText: String
  division: String
}

input TalkUpdateWithWhereUniqueWithoutUserInput {
  where: TalkWhereUniqueInput!
  data: TalkUpdateWithoutUserDataInput!
}

input TalkUpsertWithoutTalkCommentsInput {
  update: TalkUpdateWithoutTalkCommentsDataInput!
  create: TalkCreateWithoutTalkCommentsInput!
}

input TalkUpsertWithoutTalkReppliesInput {
  update: TalkUpdateWithoutTalkReppliesDataInput!
  create: TalkCreateWithoutTalkReppliesInput!
}

input TalkUpsertWithWhereUniqueWithoutUserInput {
  where: TalkWhereUniqueInput!
  update: TalkUpdateWithoutUserDataInput!
  create: TalkCreateWithoutUserInput!
}

input TalkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  talkComments_every: TalkCommentWhereInput
  talkComments_some: TalkCommentWhereInput
  talkComments_none: TalkCommentWhereInput
  talkRepplies_every: TalkRepplyWhereInput
  talkRepplies_some: TalkRepplyWhereInput
  talkRepplies_none: TalkRepplyWhereInput
  talkCommentCounts: Int
  talkCommentCounts_not: Int
  talkCommentCounts_in: [Int!]
  talkCommentCounts_not_in: [Int!]
  talkCommentCounts_lt: Int
  talkCommentCounts_lte: Int
  talkCommentCounts_gt: Int
  talkCommentCounts_gte: Int
  talkRepplyCounts: Int
  talkRepplyCounts_not: Int
  talkRepplyCounts_in: [Int!]
  talkRepplyCounts_not_in: [Int!]
  talkRepplyCounts_lt: Int
  talkRepplyCounts_lte: Int
  talkRepplyCounts_gt: Int
  talkRepplyCounts_gte: Int
  talkText: String
  talkText_not: String
  talkText_in: [String!]
  talkText_not_in: [String!]
  talkText_lt: String
  talkText_lte: String
  talkText_gt: String
  talkText_gte: String
  talkText_contains: String
  talkText_not_contains: String
  talkText_starts_with: String
  talkText_not_starts_with: String
  talkText_ends_with: String
  talkText_not_ends_with: String
  division: String
  division_not: String
  division_in: [String!]
  division_not_in: [String!]
  division_lt: String
  division_lte: String
  division_gt: String
  division_gte: String
  division_contains: String
  division_not_contains: String
  division_starts_with: String
  division_not_starts_with: String
  division_ends_with: String
  division_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TalkWhereInput!]
  OR: [TalkWhereInput!]
  NOT: [TalkWhereInput!]
}

input TalkWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  avatar: String
  nickname: String!
  dateOfBirth: Int!
  userId: String!
  password: String
  gender: String!
  bio: String
  talks(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Talk!]
  talkComments(where: TalkCommentWhereInput, orderBy: TalkCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TalkComment!]
  talkRepplies(where: TalkRepplyWhereInput, orderBy: TalkRepplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TalkRepply!]
  following(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  isFollowing: Boolean
  isSelf: Boolean
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  postCounts: Int
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  repplies(where: RepplyWhereInput, orderBy: RepplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Repply!]
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room!]
  suggestions(where: SuggestionWhereInput, orderBy: SuggestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Suggestion!]
  useTermsPrivacyagreement: Boolean!
  snsLogin: String
  loginSecret: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  avatar: String
  nickname: String!
  dateOfBirth: Int!
  userId: String!
  password: String
  gender: String!
  bio: String
  talks: TalkCreateManyWithoutUserInput
  talkComments: TalkCommentCreateManyWithoutUserInput
  talkRepplies: TalkRepplyCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostCreateManyWithoutUserInput
  postCounts: Int
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  repplies: RepplyCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  suggestions: SuggestionCreateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean!
  snsLogin: String
  loginSecret: String
}

input UserCreateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutRoomsInput {
  create: [UserCreateWithoutRoomsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReppliesInput {
  create: UserCreateWithoutReppliesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSuggestionsInput {
  create: UserCreateWithoutSuggestionsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTalkCommentsInput {
  create: UserCreateWithoutTalkCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTalkReppliesInput {
  create: UserCreateWithoutTalkReppliesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTalksInput {
  create: UserCreateWithoutTalksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  avatar: String
  nickname: String!
  dateOfBirth: Int!
  userId: String!
  password: String
  gender: String!
  bio: String
  talks: TalkCreateManyWithoutUserInput
  talkComments: TalkCommentCreateManyWithoutUserInput
  talkRepplies: TalkRepplyCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostCreateManyWithoutUserInput
  postCounts: Int
  likes: LikeCreateManyWithoutUserInput
  repplies: RepplyCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  suggestions: SuggestionCreateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean!
  snsLogin: String
  loginSecret: String
}

input UserCreateWithoutFollowersInput {
  id: ID
  avatar: String
  nickname: String!
  dateOfBirth: Int!
  userId: String!
  password: String
  gender: String!
  bio: String
  talks: TalkCreateManyWithoutUserInput
  talkComments: TalkCommentCreateManyWithoutUserInput
  talkRepplies: TalkRepplyCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostCreateManyWithoutUserInput
  postCounts: Int
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  repplies: RepplyCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  suggestions: SuggestionCreateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean!
  snsLogin: String
  loginSecret: String
}

input UserCreateWithoutFollowingInput {
  id: ID
  avatar: String
  nickname: String!
  dateOfBirth: Int!
  userId: String!
  password: String
  gender: String!
  bio: String
  talks: TalkCreateManyWithoutUserInput
  talkComments: TalkCommentCreateManyWithoutUserInput
  talkRepplies: TalkRepplyCreateManyWithoutUserInput
  followers: UserCreateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostCreateManyWithoutUserInput
  postCounts: Int
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  repplies: RepplyCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  suggestions: SuggestionCreateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean!
  snsLogin: String
  loginSecret: String
}

input UserCreateWithoutLikesInput {
  id: ID
  avatar: String
  nickname: String!
  dateOfBirth: Int!
  userId: String!
  password: String
  gender: String!
  bio: String
  talks: TalkCreateManyWithoutUserInput
  talkComments: TalkCommentCreateManyWithoutUserInput
  talkRepplies: TalkRepplyCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostCreateManyWithoutUserInput
  postCounts: Int
  comments: CommentCreateManyWithoutUserInput
  repplies: RepplyCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  suggestions: SuggestionCreateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean!
  snsLogin: String
  loginSecret: String
}

input UserCreateWithoutPostsInput {
  id: ID
  avatar: String
  nickname: String!
  dateOfBirth: Int!
  userId: String!
  password: String
  gender: String!
  bio: String
  talks: TalkCreateManyWithoutUserInput
  talkComments: TalkCommentCreateManyWithoutUserInput
  talkRepplies: TalkRepplyCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  postCounts: Int
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  repplies: RepplyCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  suggestions: SuggestionCreateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean!
  snsLogin: String
  loginSecret: String
}

input UserCreateWithoutReppliesInput {
  id: ID
  avatar: String
  nickname: String!
  dateOfBirth: Int!
  userId: String!
  password: String
  gender: String!
  bio: String
  talks: TalkCreateManyWithoutUserInput
  talkComments: TalkCommentCreateManyWithoutUserInput
  talkRepplies: TalkRepplyCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostCreateManyWithoutUserInput
  postCounts: Int
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  suggestions: SuggestionCreateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean!
  snsLogin: String
  loginSecret: String
}

input UserCreateWithoutRoomsInput {
  id: ID
  avatar: String
  nickname: String!
  dateOfBirth: Int!
  userId: String!
  password: String
  gender: String!
  bio: String
  talks: TalkCreateManyWithoutUserInput
  talkComments: TalkCommentCreateManyWithoutUserInput
  talkRepplies: TalkRepplyCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostCreateManyWithoutUserInput
  postCounts: Int
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  repplies: RepplyCreateManyWithoutUserInput
  suggestions: SuggestionCreateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean!
  snsLogin: String
  loginSecret: String
}

input UserCreateWithoutSuggestionsInput {
  id: ID
  avatar: String
  nickname: String!
  dateOfBirth: Int!
  userId: String!
  password: String
  gender: String!
  bio: String
  talks: TalkCreateManyWithoutUserInput
  talkComments: TalkCommentCreateManyWithoutUserInput
  talkRepplies: TalkRepplyCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostCreateManyWithoutUserInput
  postCounts: Int
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  repplies: RepplyCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  useTermsPrivacyagreement: Boolean!
  snsLogin: String
  loginSecret: String
}

input UserCreateWithoutTalkCommentsInput {
  id: ID
  avatar: String
  nickname: String!
  dateOfBirth: Int!
  userId: String!
  password: String
  gender: String!
  bio: String
  talks: TalkCreateManyWithoutUserInput
  talkRepplies: TalkRepplyCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostCreateManyWithoutUserInput
  postCounts: Int
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  repplies: RepplyCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  suggestions: SuggestionCreateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean!
  snsLogin: String
  loginSecret: String
}

input UserCreateWithoutTalkReppliesInput {
  id: ID
  avatar: String
  nickname: String!
  dateOfBirth: Int!
  userId: String!
  password: String
  gender: String!
  bio: String
  talks: TalkCreateManyWithoutUserInput
  talkComments: TalkCommentCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostCreateManyWithoutUserInput
  postCounts: Int
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  repplies: RepplyCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  suggestions: SuggestionCreateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean!
  snsLogin: String
  loginSecret: String
}

input UserCreateWithoutTalksInput {
  id: ID
  avatar: String
  nickname: String!
  dateOfBirth: Int!
  userId: String!
  password: String
  gender: String!
  bio: String
  talkComments: TalkCommentCreateManyWithoutUserInput
  talkRepplies: TalkRepplyCreateManyWithoutUserInput
  following: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostCreateManyWithoutUserInput
  postCounts: Int
  likes: LikeCreateManyWithoutUserInput
  comments: CommentCreateManyWithoutUserInput
  repplies: RepplyCreateManyWithoutUserInput
  rooms: RoomCreateManyWithoutParticipantsInput
  suggestions: SuggestionCreateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean!
  snsLogin: String
  loginSecret: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  avatar_ASC
  avatar_DESC
  nickname_ASC
  nickname_DESC
  dateOfBirth_ASC
  dateOfBirth_DESC
  userId_ASC
  userId_DESC
  password_ASC
  password_DESC
  gender_ASC
  gender_DESC
  bio_ASC
  bio_DESC
  isFollowing_ASC
  isFollowing_DESC
  isSelf_ASC
  isSelf_DESC
  postCounts_ASC
  postCounts_DESC
  useTermsPrivacyagreement_ASC
  useTermsPrivacyagreement_DESC
  snsLogin_ASC
  snsLogin_DESC
  loginSecret_ASC
  loginSecret_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  avatar: String
  nickname: String!
  dateOfBirth: Int!
  userId: String!
  password: String
  gender: String!
  bio: String
  isFollowing: Boolean
  isSelf: Boolean
  postCounts: Int
  useTermsPrivacyagreement: Boolean!
  snsLogin: String
  loginSecret: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  nickname: String
  nickname_not: String
  nickname_in: [String!]
  nickname_not_in: [String!]
  nickname_lt: String
  nickname_lte: String
  nickname_gt: String
  nickname_gte: String
  nickname_contains: String
  nickname_not_contains: String
  nickname_starts_with: String
  nickname_not_starts_with: String
  nickname_ends_with: String
  nickname_not_ends_with: String
  dateOfBirth: Int
  dateOfBirth_not: Int
  dateOfBirth_in: [Int!]
  dateOfBirth_not_in: [Int!]
  dateOfBirth_lt: Int
  dateOfBirth_lte: Int
  dateOfBirth_gt: Int
  dateOfBirth_gte: Int
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  isFollowing: Boolean
  isFollowing_not: Boolean
  isSelf: Boolean
  isSelf_not: Boolean
  postCounts: Int
  postCounts_not: Int
  postCounts_in: [Int!]
  postCounts_not_in: [Int!]
  postCounts_lt: Int
  postCounts_lte: Int
  postCounts_gt: Int
  postCounts_gte: Int
  useTermsPrivacyagreement: Boolean
  useTermsPrivacyagreement_not: Boolean
  snsLogin: String
  snsLogin_not: String
  snsLogin_in: [String!]
  snsLogin_not_in: [String!]
  snsLogin_lt: String
  snsLogin_lte: String
  snsLogin_gt: String
  snsLogin_gte: String
  snsLogin_contains: String
  snsLogin_not_contains: String
  snsLogin_starts_with: String
  snsLogin_not_starts_with: String
  snsLogin_ends_with: String
  snsLogin_not_ends_with: String
  loginSecret: String
  loginSecret_not: String
  loginSecret_in: [String!]
  loginSecret_not_in: [String!]
  loginSecret_lt: String
  loginSecret_lte: String
  loginSecret_gt: String
  loginSecret_gte: String
  loginSecret_contains: String
  loginSecret_not_contains: String
  loginSecret_starts_with: String
  loginSecret_not_starts_with: String
  loginSecret_ends_with: String
  loginSecret_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  talks: TalkUpdateManyWithoutUserInput
  talkComments: TalkCommentUpdateManyWithoutUserInput
  talkRepplies: TalkRepplyUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostUpdateManyWithoutUserInput
  postCounts: Int
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  repplies: RepplyUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  suggestions: SuggestionUpdateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  talks: TalkUpdateManyWithoutUserInput
  talkComments: TalkCommentUpdateManyWithoutUserInput
  talkRepplies: TalkRepplyUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostUpdateManyWithoutUserInput
  postCounts: Int
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  repplies: RepplyUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  suggestions: SuggestionUpdateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateManyDataInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  isFollowing: Boolean
  isSelf: Boolean
  postCounts: Int
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateManyMutationInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  isFollowing: Boolean
  isSelf: Boolean
  postCounts: Int
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowingInput {
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutRoomsInput {
  create: [UserCreateWithoutRoomsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRoomsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRoomsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutSuggestionsInput {
  create: UserCreateWithoutSuggestionsInput
  update: UserUpdateWithoutSuggestionsDataInput
  upsert: UserUpsertWithoutSuggestionsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutTalksInput {
  create: UserCreateWithoutTalksInput
  update: UserUpdateWithoutTalksDataInput
  upsert: UserUpsertWithoutTalksInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  update: UserUpdateWithoutLikesDataInput
  upsert: UserUpsertWithoutLikesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutReppliesInput {
  create: UserCreateWithoutReppliesInput
  update: UserUpdateWithoutReppliesDataInput
  upsert: UserUpsertWithoutReppliesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutTalkCommentsInput {
  create: UserCreateWithoutTalkCommentsInput
  update: UserUpdateWithoutTalkCommentsDataInput
  upsert: UserUpsertWithoutTalkCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutTalkReppliesInput {
  create: UserCreateWithoutTalkReppliesInput
  update: UserUpdateWithoutTalkReppliesDataInput
  upsert: UserUpsertWithoutTalkReppliesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCommentsDataInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  talks: TalkUpdateManyWithoutUserInput
  talkComments: TalkCommentUpdateManyWithoutUserInput
  talkRepplies: TalkRepplyUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostUpdateManyWithoutUserInput
  postCounts: Int
  likes: LikeUpdateManyWithoutUserInput
  repplies: RepplyUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  suggestions: SuggestionUpdateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateWithoutFollowersDataInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  talks: TalkUpdateManyWithoutUserInput
  talkComments: TalkCommentUpdateManyWithoutUserInput
  talkRepplies: TalkRepplyUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostUpdateManyWithoutUserInput
  postCounts: Int
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  repplies: RepplyUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  suggestions: SuggestionUpdateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateWithoutFollowingDataInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  talks: TalkUpdateManyWithoutUserInput
  talkComments: TalkCommentUpdateManyWithoutUserInput
  talkRepplies: TalkRepplyUpdateManyWithoutUserInput
  followers: UserUpdateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostUpdateManyWithoutUserInput
  postCounts: Int
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  repplies: RepplyUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  suggestions: SuggestionUpdateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateWithoutLikesDataInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  talks: TalkUpdateManyWithoutUserInput
  talkComments: TalkCommentUpdateManyWithoutUserInput
  talkRepplies: TalkRepplyUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostUpdateManyWithoutUserInput
  postCounts: Int
  comments: CommentUpdateManyWithoutUserInput
  repplies: RepplyUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  suggestions: SuggestionUpdateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateWithoutPostsDataInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  talks: TalkUpdateManyWithoutUserInput
  talkComments: TalkCommentUpdateManyWithoutUserInput
  talkRepplies: TalkRepplyUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  postCounts: Int
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  repplies: RepplyUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  suggestions: SuggestionUpdateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateWithoutReppliesDataInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  talks: TalkUpdateManyWithoutUserInput
  talkComments: TalkCommentUpdateManyWithoutUserInput
  talkRepplies: TalkRepplyUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostUpdateManyWithoutUserInput
  postCounts: Int
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  suggestions: SuggestionUpdateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateWithoutRoomsDataInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  talks: TalkUpdateManyWithoutUserInput
  talkComments: TalkCommentUpdateManyWithoutUserInput
  talkRepplies: TalkRepplyUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostUpdateManyWithoutUserInput
  postCounts: Int
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  repplies: RepplyUpdateManyWithoutUserInput
  suggestions: SuggestionUpdateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateWithoutSuggestionsDataInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  talks: TalkUpdateManyWithoutUserInput
  talkComments: TalkCommentUpdateManyWithoutUserInput
  talkRepplies: TalkRepplyUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostUpdateManyWithoutUserInput
  postCounts: Int
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  repplies: RepplyUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateWithoutTalkCommentsDataInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  talks: TalkUpdateManyWithoutUserInput
  talkRepplies: TalkRepplyUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostUpdateManyWithoutUserInput
  postCounts: Int
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  repplies: RepplyUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  suggestions: SuggestionUpdateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateWithoutTalkReppliesDataInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  talks: TalkUpdateManyWithoutUserInput
  talkComments: TalkCommentUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostUpdateManyWithoutUserInput
  postCounts: Int
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  repplies: RepplyUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  suggestions: SuggestionUpdateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateWithoutTalksDataInput {
  avatar: String
  nickname: String
  dateOfBirth: Int
  userId: String
  password: String
  gender: String
  bio: String
  talkComments: TalkCommentUpdateManyWithoutUserInput
  talkRepplies: TalkRepplyUpdateManyWithoutUserInput
  following: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowingInput
  isFollowing: Boolean
  isSelf: Boolean
  posts: PostUpdateManyWithoutUserInput
  postCounts: Int
  likes: LikeUpdateManyWithoutUserInput
  comments: CommentUpdateManyWithoutUserInput
  repplies: RepplyUpdateManyWithoutUserInput
  rooms: RoomUpdateManyWithoutParticipantsInput
  suggestions: SuggestionUpdateManyWithoutUserInput
  useTermsPrivacyagreement: Boolean
  snsLogin: String
  loginSecret: String
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowersDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowingDataInput!
}

input UserUpdateWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRoomsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput!
  create: UserCreateWithoutLikesInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutReppliesInput {
  update: UserUpdateWithoutReppliesDataInput!
  create: UserCreateWithoutReppliesInput!
}

input UserUpsertWithoutSuggestionsInput {
  update: UserUpdateWithoutSuggestionsDataInput!
  create: UserCreateWithoutSuggestionsInput!
}

input UserUpsertWithoutTalkCommentsInput {
  update: UserUpdateWithoutTalkCommentsDataInput!
  create: UserCreateWithoutTalkCommentsInput!
}

input UserUpsertWithoutTalkReppliesInput {
  update: UserUpdateWithoutTalkReppliesDataInput!
  create: UserCreateWithoutTalkReppliesInput!
}

input UserUpsertWithoutTalksInput {
  update: UserUpdateWithoutTalksDataInput!
  create: UserCreateWithoutTalksInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowingDataInput!
  create: UserCreateWithoutFollowingInput!
}

input UserUpsertWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRoomsDataInput!
  create: UserCreateWithoutRoomsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  nickname: String
  nickname_not: String
  nickname_in: [String!]
  nickname_not_in: [String!]
  nickname_lt: String
  nickname_lte: String
  nickname_gt: String
  nickname_gte: String
  nickname_contains: String
  nickname_not_contains: String
  nickname_starts_with: String
  nickname_not_starts_with: String
  nickname_ends_with: String
  nickname_not_ends_with: String
  dateOfBirth: Int
  dateOfBirth_not: Int
  dateOfBirth_in: [Int!]
  dateOfBirth_not_in: [Int!]
  dateOfBirth_lt: Int
  dateOfBirth_lte: Int
  dateOfBirth_gt: Int
  dateOfBirth_gte: Int
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  talks_every: TalkWhereInput
  talks_some: TalkWhereInput
  talks_none: TalkWhereInput
  talkComments_every: TalkCommentWhereInput
  talkComments_some: TalkCommentWhereInput
  talkComments_none: TalkCommentWhereInput
  talkRepplies_every: TalkRepplyWhereInput
  talkRepplies_some: TalkRepplyWhereInput
  talkRepplies_none: TalkRepplyWhereInput
  following_every: UserWhereInput
  following_some: UserWhereInput
  following_none: UserWhereInput
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  isFollowing: Boolean
  isFollowing_not: Boolean
  isSelf: Boolean
  isSelf_not: Boolean
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  postCounts: Int
  postCounts_not: Int
  postCounts_in: [Int!]
  postCounts_not_in: [Int!]
  postCounts_lt: Int
  postCounts_lte: Int
  postCounts_gt: Int
  postCounts_gte: Int
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  repplies_every: RepplyWhereInput
  repplies_some: RepplyWhereInput
  repplies_none: RepplyWhereInput
  rooms_every: RoomWhereInput
  rooms_some: RoomWhereInput
  rooms_none: RoomWhereInput
  suggestions_every: SuggestionWhereInput
  suggestions_some: SuggestionWhereInput
  suggestions_none: SuggestionWhereInput
  useTermsPrivacyagreement: Boolean
  useTermsPrivacyagreement_not: Boolean
  snsLogin: String
  snsLogin_not: String
  snsLogin_in: [String!]
  snsLogin_not_in: [String!]
  snsLogin_lt: String
  snsLogin_lte: String
  snsLogin_gt: String
  snsLogin_gte: String
  snsLogin_contains: String
  snsLogin_not_contains: String
  snsLogin_starts_with: String
  snsLogin_not_starts_with: String
  snsLogin_ends_with: String
  snsLogin_not_ends_with: String
  loginSecret: String
  loginSecret_not: String
  loginSecret_in: [String!]
  loginSecret_not_in: [String!]
  loginSecret_lt: String
  loginSecret_lte: String
  loginSecret_gt: String
  loginSecret_gte: String
  loginSecret_contains: String
  loginSecret_not_contains: String
  loginSecret_starts_with: String
  loginSecret_not_starts_with: String
  loginSecret_ends_with: String
  loginSecret_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  nickname: String
  userId: String
}
`
      }
    