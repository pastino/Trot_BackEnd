// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  generationVideo: (where?: GenerationVideoWhereInput) => Promise<boolean>;
  information: (where?: InformationWhereInput) => Promise<boolean>;
  mainView: (where?: MainViewWhereInput) => Promise<boolean>;
  video: (where?: VideoWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  generationVideo: (
    where: GenerationVideoWhereUniqueInput
  ) => GenerationVideoNullablePromise;
  generationVideos: (args?: {
    where?: GenerationVideoWhereInput;
    orderBy?: GenerationVideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GenerationVideo>;
  generationVideosConnection: (args?: {
    where?: GenerationVideoWhereInput;
    orderBy?: GenerationVideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GenerationVideoConnectionPromise;
  information: (
    where: InformationWhereUniqueInput
  ) => InformationNullablePromise;
  informations: (args?: {
    where?: InformationWhereInput;
    orderBy?: InformationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Information>;
  informationsConnection: (args?: {
    where?: InformationWhereInput;
    orderBy?: InformationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InformationConnectionPromise;
  mainView: (where: MainViewWhereUniqueInput) => MainViewNullablePromise;
  mainViews: (args?: {
    where?: MainViewWhereInput;
    orderBy?: MainViewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MainView>;
  mainViewsConnection: (args?: {
    where?: MainViewWhereInput;
    orderBy?: MainViewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MainViewConnectionPromise;
  video: (where: VideoWhereUniqueInput) => VideoNullablePromise;
  videos: (args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Video>;
  videosConnection: (args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VideoConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGenerationVideo: (
    data: GenerationVideoCreateInput
  ) => GenerationVideoPromise;
  updateGenerationVideo: (args: {
    data: GenerationVideoUpdateInput;
    where: GenerationVideoWhereUniqueInput;
  }) => GenerationVideoPromise;
  updateManyGenerationVideos: (args: {
    data: GenerationVideoUpdateManyMutationInput;
    where?: GenerationVideoWhereInput;
  }) => BatchPayloadPromise;
  upsertGenerationVideo: (args: {
    where: GenerationVideoWhereUniqueInput;
    create: GenerationVideoCreateInput;
    update: GenerationVideoUpdateInput;
  }) => GenerationVideoPromise;
  deleteGenerationVideo: (
    where: GenerationVideoWhereUniqueInput
  ) => GenerationVideoPromise;
  deleteManyGenerationVideos: (
    where?: GenerationVideoWhereInput
  ) => BatchPayloadPromise;
  createInformation: (data: InformationCreateInput) => InformationPromise;
  deleteInformation: (where: InformationWhereUniqueInput) => InformationPromise;
  deleteManyInformations: (
    where?: InformationWhereInput
  ) => BatchPayloadPromise;
  createMainView: (data: MainViewCreateInput) => MainViewPromise;
  updateMainView: (args: {
    data: MainViewUpdateInput;
    where: MainViewWhereUniqueInput;
  }) => MainViewPromise;
  updateManyMainViews: (args: {
    data: MainViewUpdateManyMutationInput;
    where?: MainViewWhereInput;
  }) => BatchPayloadPromise;
  upsertMainView: (args: {
    where: MainViewWhereUniqueInput;
    create: MainViewCreateInput;
    update: MainViewUpdateInput;
  }) => MainViewPromise;
  deleteMainView: (where: MainViewWhereUniqueInput) => MainViewPromise;
  deleteManyMainViews: (where?: MainViewWhereInput) => BatchPayloadPromise;
  createVideo: (data: VideoCreateInput) => VideoPromise;
  updateVideo: (args: {
    data: VideoUpdateInput;
    where: VideoWhereUniqueInput;
  }) => VideoPromise;
  updateManyVideos: (args: {
    data: VideoUpdateManyMutationInput;
    where?: VideoWhereInput;
  }) => BatchPayloadPromise;
  upsertVideo: (args: {
    where: VideoWhereUniqueInput;
    create: VideoCreateInput;
    update: VideoUpdateInput;
  }) => VideoPromise;
  deleteVideo: (where: VideoWhereUniqueInput) => VideoPromise;
  deleteManyVideos: (where?: VideoWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  generationVideo: (
    where?: GenerationVideoSubscriptionWhereInput
  ) => GenerationVideoSubscriptionPayloadSubscription;
  information: (
    where?: InformationSubscriptionWhereInput
  ) => InformationSubscriptionPayloadSubscription;
  mainView: (
    where?: MainViewSubscriptionWhereInput
  ) => MainViewSubscriptionPayloadSubscription;
  video: (
    where?: VideoSubscriptionWhereInput
  ) => VideoSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GenerationVideoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "division_ASC"
  | "division_DESC"
  | "program_ASC"
  | "program_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "singer_ASC"
  | "singer_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC"
  | "title_ASC"
  | "title_DESC"
  | "videoId_ASC"
  | "videoId_DESC"
  | "ranking_ASC"
  | "ranking_DESC"
  | "publishedAt_ASC"
  | "publishedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InformationOrderByInput = "id_ASC" | "id_DESC";

export type MainViewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "division_ASC"
  | "division_DESC"
  | "program_ASC"
  | "program_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "singer_ASC"
  | "singer_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC"
  | "title_ASC"
  | "title_DESC"
  | "videoId_ASC"
  | "videoId_DESC"
  | "ranking_ASC"
  | "ranking_DESC"
  | "publishedAt_ASC"
  | "publishedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VideoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "division_ASC"
  | "division_DESC"
  | "program_ASC"
  | "program_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "singer_ASC"
  | "singer_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC"
  | "title_ASC"
  | "title_DESC"
  | "videoId_ASC"
  | "videoId_DESC"
  | "publishedAt_ASC"
  | "publishedAt_DESC"
  | "mainRegister_ASC"
  | "mainRegister_DESC"
  | "album_ASC"
  | "album_DESC"
  | "songId_ASC"
  | "songId_DESC"
  | "releaseDate_ASC"
  | "releaseDate_DESC"
  | "like_ASC"
  | "like_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type GenerationVideoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GenerationVideoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  division?: Maybe<String>;
  division_not?: Maybe<String>;
  division_in?: Maybe<String[] | String>;
  division_not_in?: Maybe<String[] | String>;
  division_lt?: Maybe<String>;
  division_lte?: Maybe<String>;
  division_gt?: Maybe<String>;
  division_gte?: Maybe<String>;
  division_contains?: Maybe<String>;
  division_not_contains?: Maybe<String>;
  division_starts_with?: Maybe<String>;
  division_not_starts_with?: Maybe<String>;
  division_ends_with?: Maybe<String>;
  division_not_ends_with?: Maybe<String>;
  program?: Maybe<String>;
  program_not?: Maybe<String>;
  program_in?: Maybe<String[] | String>;
  program_not_in?: Maybe<String[] | String>;
  program_lt?: Maybe<String>;
  program_lte?: Maybe<String>;
  program_gt?: Maybe<String>;
  program_gte?: Maybe<String>;
  program_contains?: Maybe<String>;
  program_not_contains?: Maybe<String>;
  program_starts_with?: Maybe<String>;
  program_not_starts_with?: Maybe<String>;
  program_ends_with?: Maybe<String>;
  program_not_ends_with?: Maybe<String>;
  duration?: Maybe<String>;
  duration_not?: Maybe<String>;
  duration_in?: Maybe<String[] | String>;
  duration_not_in?: Maybe<String[] | String>;
  duration_lt?: Maybe<String>;
  duration_lte?: Maybe<String>;
  duration_gt?: Maybe<String>;
  duration_gte?: Maybe<String>;
  duration_contains?: Maybe<String>;
  duration_not_contains?: Maybe<String>;
  duration_starts_with?: Maybe<String>;
  duration_not_starts_with?: Maybe<String>;
  duration_ends_with?: Maybe<String>;
  duration_not_ends_with?: Maybe<String>;
  singer?: Maybe<String>;
  singer_not?: Maybe<String>;
  singer_in?: Maybe<String[] | String>;
  singer_not_in?: Maybe<String[] | String>;
  singer_lt?: Maybe<String>;
  singer_lte?: Maybe<String>;
  singer_gt?: Maybe<String>;
  singer_gte?: Maybe<String>;
  singer_contains?: Maybe<String>;
  singer_not_contains?: Maybe<String>;
  singer_starts_with?: Maybe<String>;
  singer_not_starts_with?: Maybe<String>;
  singer_ends_with?: Maybe<String>;
  singer_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  videoId?: Maybe<String>;
  videoId_not?: Maybe<String>;
  videoId_in?: Maybe<String[] | String>;
  videoId_not_in?: Maybe<String[] | String>;
  videoId_lt?: Maybe<String>;
  videoId_lte?: Maybe<String>;
  videoId_gt?: Maybe<String>;
  videoId_gte?: Maybe<String>;
  videoId_contains?: Maybe<String>;
  videoId_not_contains?: Maybe<String>;
  videoId_starts_with?: Maybe<String>;
  videoId_not_starts_with?: Maybe<String>;
  videoId_ends_with?: Maybe<String>;
  videoId_not_ends_with?: Maybe<String>;
  ranking?: Maybe<Int>;
  ranking_not?: Maybe<Int>;
  ranking_in?: Maybe<Int[] | Int>;
  ranking_not_in?: Maybe<Int[] | Int>;
  ranking_lt?: Maybe<Int>;
  ranking_lte?: Maybe<Int>;
  ranking_gt?: Maybe<Int>;
  ranking_gte?: Maybe<Int>;
  publishedAt?: Maybe<DateTimeInput>;
  publishedAt_not?: Maybe<DateTimeInput>;
  publishedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedAt_lt?: Maybe<DateTimeInput>;
  publishedAt_lte?: Maybe<DateTimeInput>;
  publishedAt_gt?: Maybe<DateTimeInput>;
  publishedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GenerationVideoWhereInput[] | GenerationVideoWhereInput>;
  OR?: Maybe<GenerationVideoWhereInput[] | GenerationVideoWhereInput>;
  NOT?: Maybe<GenerationVideoWhereInput[] | GenerationVideoWhereInput>;
}

export type InformationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface InformationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<InformationWhereInput[] | InformationWhereInput>;
  OR?: Maybe<InformationWhereInput[] | InformationWhereInput>;
  NOT?: Maybe<InformationWhereInput[] | InformationWhereInput>;
}

export type MainViewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MainViewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  division?: Maybe<String>;
  division_not?: Maybe<String>;
  division_in?: Maybe<String[] | String>;
  division_not_in?: Maybe<String[] | String>;
  division_lt?: Maybe<String>;
  division_lte?: Maybe<String>;
  division_gt?: Maybe<String>;
  division_gte?: Maybe<String>;
  division_contains?: Maybe<String>;
  division_not_contains?: Maybe<String>;
  division_starts_with?: Maybe<String>;
  division_not_starts_with?: Maybe<String>;
  division_ends_with?: Maybe<String>;
  division_not_ends_with?: Maybe<String>;
  program?: Maybe<String>;
  program_not?: Maybe<String>;
  program_in?: Maybe<String[] | String>;
  program_not_in?: Maybe<String[] | String>;
  program_lt?: Maybe<String>;
  program_lte?: Maybe<String>;
  program_gt?: Maybe<String>;
  program_gte?: Maybe<String>;
  program_contains?: Maybe<String>;
  program_not_contains?: Maybe<String>;
  program_starts_with?: Maybe<String>;
  program_not_starts_with?: Maybe<String>;
  program_ends_with?: Maybe<String>;
  program_not_ends_with?: Maybe<String>;
  duration?: Maybe<String>;
  duration_not?: Maybe<String>;
  duration_in?: Maybe<String[] | String>;
  duration_not_in?: Maybe<String[] | String>;
  duration_lt?: Maybe<String>;
  duration_lte?: Maybe<String>;
  duration_gt?: Maybe<String>;
  duration_gte?: Maybe<String>;
  duration_contains?: Maybe<String>;
  duration_not_contains?: Maybe<String>;
  duration_starts_with?: Maybe<String>;
  duration_not_starts_with?: Maybe<String>;
  duration_ends_with?: Maybe<String>;
  duration_not_ends_with?: Maybe<String>;
  singer?: Maybe<String>;
  singer_not?: Maybe<String>;
  singer_in?: Maybe<String[] | String>;
  singer_not_in?: Maybe<String[] | String>;
  singer_lt?: Maybe<String>;
  singer_lte?: Maybe<String>;
  singer_gt?: Maybe<String>;
  singer_gte?: Maybe<String>;
  singer_contains?: Maybe<String>;
  singer_not_contains?: Maybe<String>;
  singer_starts_with?: Maybe<String>;
  singer_not_starts_with?: Maybe<String>;
  singer_ends_with?: Maybe<String>;
  singer_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  videoId?: Maybe<String>;
  videoId_not?: Maybe<String>;
  videoId_in?: Maybe<String[] | String>;
  videoId_not_in?: Maybe<String[] | String>;
  videoId_lt?: Maybe<String>;
  videoId_lte?: Maybe<String>;
  videoId_gt?: Maybe<String>;
  videoId_gte?: Maybe<String>;
  videoId_contains?: Maybe<String>;
  videoId_not_contains?: Maybe<String>;
  videoId_starts_with?: Maybe<String>;
  videoId_not_starts_with?: Maybe<String>;
  videoId_ends_with?: Maybe<String>;
  videoId_not_ends_with?: Maybe<String>;
  ranking?: Maybe<Int>;
  ranking_not?: Maybe<Int>;
  ranking_in?: Maybe<Int[] | Int>;
  ranking_not_in?: Maybe<Int[] | Int>;
  ranking_lt?: Maybe<Int>;
  ranking_lte?: Maybe<Int>;
  ranking_gt?: Maybe<Int>;
  ranking_gte?: Maybe<Int>;
  publishedAt?: Maybe<DateTimeInput>;
  publishedAt_not?: Maybe<DateTimeInput>;
  publishedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedAt_lt?: Maybe<DateTimeInput>;
  publishedAt_lte?: Maybe<DateTimeInput>;
  publishedAt_gt?: Maybe<DateTimeInput>;
  publishedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MainViewWhereInput[] | MainViewWhereInput>;
  OR?: Maybe<MainViewWhereInput[] | MainViewWhereInput>;
  NOT?: Maybe<MainViewWhereInput[] | MainViewWhereInput>;
}

export type VideoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface VideoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  division?: Maybe<String>;
  division_not?: Maybe<String>;
  division_in?: Maybe<String[] | String>;
  division_not_in?: Maybe<String[] | String>;
  division_lt?: Maybe<String>;
  division_lte?: Maybe<String>;
  division_gt?: Maybe<String>;
  division_gte?: Maybe<String>;
  division_contains?: Maybe<String>;
  division_not_contains?: Maybe<String>;
  division_starts_with?: Maybe<String>;
  division_not_starts_with?: Maybe<String>;
  division_ends_with?: Maybe<String>;
  division_not_ends_with?: Maybe<String>;
  program?: Maybe<String>;
  program_not?: Maybe<String>;
  program_in?: Maybe<String[] | String>;
  program_not_in?: Maybe<String[] | String>;
  program_lt?: Maybe<String>;
  program_lte?: Maybe<String>;
  program_gt?: Maybe<String>;
  program_gte?: Maybe<String>;
  program_contains?: Maybe<String>;
  program_not_contains?: Maybe<String>;
  program_starts_with?: Maybe<String>;
  program_not_starts_with?: Maybe<String>;
  program_ends_with?: Maybe<String>;
  program_not_ends_with?: Maybe<String>;
  duration?: Maybe<String>;
  duration_not?: Maybe<String>;
  duration_in?: Maybe<String[] | String>;
  duration_not_in?: Maybe<String[] | String>;
  duration_lt?: Maybe<String>;
  duration_lte?: Maybe<String>;
  duration_gt?: Maybe<String>;
  duration_gte?: Maybe<String>;
  duration_contains?: Maybe<String>;
  duration_not_contains?: Maybe<String>;
  duration_starts_with?: Maybe<String>;
  duration_not_starts_with?: Maybe<String>;
  duration_ends_with?: Maybe<String>;
  duration_not_ends_with?: Maybe<String>;
  singer?: Maybe<String>;
  singer_not?: Maybe<String>;
  singer_in?: Maybe<String[] | String>;
  singer_not_in?: Maybe<String[] | String>;
  singer_lt?: Maybe<String>;
  singer_lte?: Maybe<String>;
  singer_gt?: Maybe<String>;
  singer_gte?: Maybe<String>;
  singer_contains?: Maybe<String>;
  singer_not_contains?: Maybe<String>;
  singer_starts_with?: Maybe<String>;
  singer_not_starts_with?: Maybe<String>;
  singer_ends_with?: Maybe<String>;
  singer_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  videoId?: Maybe<String>;
  videoId_not?: Maybe<String>;
  videoId_in?: Maybe<String[] | String>;
  videoId_not_in?: Maybe<String[] | String>;
  videoId_lt?: Maybe<String>;
  videoId_lte?: Maybe<String>;
  videoId_gt?: Maybe<String>;
  videoId_gte?: Maybe<String>;
  videoId_contains?: Maybe<String>;
  videoId_not_contains?: Maybe<String>;
  videoId_starts_with?: Maybe<String>;
  videoId_not_starts_with?: Maybe<String>;
  videoId_ends_with?: Maybe<String>;
  videoId_not_ends_with?: Maybe<String>;
  publishedAt?: Maybe<DateTimeInput>;
  publishedAt_not?: Maybe<DateTimeInput>;
  publishedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  publishedAt_lt?: Maybe<DateTimeInput>;
  publishedAt_lte?: Maybe<DateTimeInput>;
  publishedAt_gt?: Maybe<DateTimeInput>;
  publishedAt_gte?: Maybe<DateTimeInput>;
  mainRegister?: Maybe<Boolean>;
  mainRegister_not?: Maybe<Boolean>;
  album?: Maybe<String>;
  album_not?: Maybe<String>;
  album_in?: Maybe<String[] | String>;
  album_not_in?: Maybe<String[] | String>;
  album_lt?: Maybe<String>;
  album_lte?: Maybe<String>;
  album_gt?: Maybe<String>;
  album_gte?: Maybe<String>;
  album_contains?: Maybe<String>;
  album_not_contains?: Maybe<String>;
  album_starts_with?: Maybe<String>;
  album_not_starts_with?: Maybe<String>;
  album_ends_with?: Maybe<String>;
  album_not_ends_with?: Maybe<String>;
  songId?: Maybe<String>;
  songId_not?: Maybe<String>;
  songId_in?: Maybe<String[] | String>;
  songId_not_in?: Maybe<String[] | String>;
  songId_lt?: Maybe<String>;
  songId_lte?: Maybe<String>;
  songId_gt?: Maybe<String>;
  songId_gte?: Maybe<String>;
  songId_contains?: Maybe<String>;
  songId_not_contains?: Maybe<String>;
  songId_starts_with?: Maybe<String>;
  songId_not_starts_with?: Maybe<String>;
  songId_ends_with?: Maybe<String>;
  songId_not_ends_with?: Maybe<String>;
  releaseDate?: Maybe<String>;
  releaseDate_not?: Maybe<String>;
  releaseDate_in?: Maybe<String[] | String>;
  releaseDate_not_in?: Maybe<String[] | String>;
  releaseDate_lt?: Maybe<String>;
  releaseDate_lte?: Maybe<String>;
  releaseDate_gt?: Maybe<String>;
  releaseDate_gte?: Maybe<String>;
  releaseDate_contains?: Maybe<String>;
  releaseDate_not_contains?: Maybe<String>;
  releaseDate_starts_with?: Maybe<String>;
  releaseDate_not_starts_with?: Maybe<String>;
  releaseDate_ends_with?: Maybe<String>;
  releaseDate_not_ends_with?: Maybe<String>;
  like?: Maybe<Int>;
  like_not?: Maybe<Int>;
  like_in?: Maybe<Int[] | Int>;
  like_not_in?: Maybe<Int[] | Int>;
  like_lt?: Maybe<Int>;
  like_lte?: Maybe<Int>;
  like_gt?: Maybe<Int>;
  like_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<VideoWhereInput[] | VideoWhereInput>;
  OR?: Maybe<VideoWhereInput[] | VideoWhereInput>;
  NOT?: Maybe<VideoWhereInput[] | VideoWhereInput>;
}

export interface GenerationVideoCreateInput {
  id?: Maybe<ID_Input>;
  division?: Maybe<String>;
  program?: Maybe<String>;
  duration?: Maybe<String>;
  singer?: Maybe<String>;
  thumbnail?: Maybe<String>;
  title?: Maybe<String>;
  videoId?: Maybe<String>;
  ranking?: Maybe<Int>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface GenerationVideoUpdateInput {
  division?: Maybe<String>;
  program?: Maybe<String>;
  duration?: Maybe<String>;
  singer?: Maybe<String>;
  thumbnail?: Maybe<String>;
  title?: Maybe<String>;
  videoId?: Maybe<String>;
  ranking?: Maybe<Int>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface GenerationVideoUpdateManyMutationInput {
  division?: Maybe<String>;
  program?: Maybe<String>;
  duration?: Maybe<String>;
  singer?: Maybe<String>;
  thumbnail?: Maybe<String>;
  title?: Maybe<String>;
  videoId?: Maybe<String>;
  ranking?: Maybe<Int>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface InformationCreateInput {
  id?: Maybe<ID_Input>;
}

export interface MainViewCreateInput {
  id?: Maybe<ID_Input>;
  division?: Maybe<String>;
  program?: Maybe<String>;
  duration?: Maybe<String>;
  singer?: Maybe<String>;
  thumbnail?: Maybe<String>;
  title?: Maybe<String>;
  videoId?: Maybe<String>;
  ranking?: Maybe<Int>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface MainViewUpdateInput {
  division?: Maybe<String>;
  program?: Maybe<String>;
  duration?: Maybe<String>;
  singer?: Maybe<String>;
  thumbnail?: Maybe<String>;
  title?: Maybe<String>;
  videoId?: Maybe<String>;
  ranking?: Maybe<Int>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface MainViewUpdateManyMutationInput {
  division?: Maybe<String>;
  program?: Maybe<String>;
  duration?: Maybe<String>;
  singer?: Maybe<String>;
  thumbnail?: Maybe<String>;
  title?: Maybe<String>;
  videoId?: Maybe<String>;
  ranking?: Maybe<Int>;
  publishedAt?: Maybe<DateTimeInput>;
}

export interface VideoCreateInput {
  id?: Maybe<ID_Input>;
  division?: Maybe<String>;
  program?: Maybe<String>;
  duration?: Maybe<String>;
  singer?: Maybe<String>;
  thumbnail?: Maybe<String>;
  title?: Maybe<String>;
  videoId?: Maybe<String>;
  publishedAt?: Maybe<DateTimeInput>;
  mainRegister?: Maybe<Boolean>;
  album?: Maybe<String>;
  songId?: Maybe<String>;
  releaseDate?: Maybe<String>;
  like?: Maybe<Int>;
}

export interface VideoUpdateInput {
  division?: Maybe<String>;
  program?: Maybe<String>;
  duration?: Maybe<String>;
  singer?: Maybe<String>;
  thumbnail?: Maybe<String>;
  title?: Maybe<String>;
  videoId?: Maybe<String>;
  publishedAt?: Maybe<DateTimeInput>;
  mainRegister?: Maybe<Boolean>;
  album?: Maybe<String>;
  songId?: Maybe<String>;
  releaseDate?: Maybe<String>;
  like?: Maybe<Int>;
}

export interface VideoUpdateManyMutationInput {
  division?: Maybe<String>;
  program?: Maybe<String>;
  duration?: Maybe<String>;
  singer?: Maybe<String>;
  thumbnail?: Maybe<String>;
  title?: Maybe<String>;
  videoId?: Maybe<String>;
  publishedAt?: Maybe<DateTimeInput>;
  mainRegister?: Maybe<Boolean>;
  album?: Maybe<String>;
  songId?: Maybe<String>;
  releaseDate?: Maybe<String>;
  like?: Maybe<Int>;
}

export interface GenerationVideoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GenerationVideoWhereInput>;
  AND?: Maybe<
    | GenerationVideoSubscriptionWhereInput[]
    | GenerationVideoSubscriptionWhereInput
  >;
  OR?: Maybe<
    | GenerationVideoSubscriptionWhereInput[]
    | GenerationVideoSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | GenerationVideoSubscriptionWhereInput[]
    | GenerationVideoSubscriptionWhereInput
  >;
}

export interface InformationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InformationWhereInput>;
  AND?: Maybe<
    InformationSubscriptionWhereInput[] | InformationSubscriptionWhereInput
  >;
  OR?: Maybe<
    InformationSubscriptionWhereInput[] | InformationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    InformationSubscriptionWhereInput[] | InformationSubscriptionWhereInput
  >;
}

export interface MainViewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MainViewWhereInput>;
  AND?: Maybe<
    MainViewSubscriptionWhereInput[] | MainViewSubscriptionWhereInput
  >;
  OR?: Maybe<MainViewSubscriptionWhereInput[] | MainViewSubscriptionWhereInput>;
  NOT?: Maybe<
    MainViewSubscriptionWhereInput[] | MainViewSubscriptionWhereInput
  >;
}

export interface VideoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VideoWhereInput>;
  AND?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
  OR?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
  NOT?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface GenerationVideo {
  id: ID_Output;
  division?: String;
  program?: String;
  duration?: String;
  singer?: String;
  thumbnail?: String;
  title?: String;
  videoId?: String;
  ranking?: Int;
  publishedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GenerationVideoPromise
  extends Promise<GenerationVideo>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  division: () => Promise<String>;
  program: () => Promise<String>;
  duration: () => Promise<String>;
  singer: () => Promise<String>;
  thumbnail: () => Promise<String>;
  title: () => Promise<String>;
  videoId: () => Promise<String>;
  ranking: () => Promise<Int>;
  publishedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GenerationVideoSubscription
  extends Promise<AsyncIterator<GenerationVideo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  division: () => Promise<AsyncIterator<String>>;
  program: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<String>>;
  singer: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  videoId: () => Promise<AsyncIterator<String>>;
  ranking: () => Promise<AsyncIterator<Int>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GenerationVideoNullablePromise
  extends Promise<GenerationVideo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  division: () => Promise<String>;
  program: () => Promise<String>;
  duration: () => Promise<String>;
  singer: () => Promise<String>;
  thumbnail: () => Promise<String>;
  title: () => Promise<String>;
  videoId: () => Promise<String>;
  ranking: () => Promise<Int>;
  publishedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GenerationVideoConnection {
  pageInfo: PageInfo;
  edges: GenerationVideoEdge[];
}

export interface GenerationVideoConnectionPromise
  extends Promise<GenerationVideoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GenerationVideoEdge>>() => T;
  aggregate: <T = AggregateGenerationVideoPromise>() => T;
}

export interface GenerationVideoConnectionSubscription
  extends Promise<AsyncIterator<GenerationVideoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GenerationVideoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGenerationVideoSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GenerationVideoEdge {
  node: GenerationVideo;
  cursor: String;
}

export interface GenerationVideoEdgePromise
  extends Promise<GenerationVideoEdge>,
    Fragmentable {
  node: <T = GenerationVideoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GenerationVideoEdgeSubscription
  extends Promise<AsyncIterator<GenerationVideoEdge>>,
    Fragmentable {
  node: <T = GenerationVideoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGenerationVideo {
  count: Int;
}

export interface AggregateGenerationVideoPromise
  extends Promise<AggregateGenerationVideo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGenerationVideoSubscription
  extends Promise<AsyncIterator<AggregateGenerationVideo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Information {
  id: ID_Output;
}

export interface InformationPromise extends Promise<Information>, Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface InformationSubscription
  extends Promise<AsyncIterator<Information>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface InformationNullablePromise
  extends Promise<Information | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface InformationConnection {
  pageInfo: PageInfo;
  edges: InformationEdge[];
}

export interface InformationConnectionPromise
  extends Promise<InformationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InformationEdge>>() => T;
  aggregate: <T = AggregateInformationPromise>() => T;
}

export interface InformationConnectionSubscription
  extends Promise<AsyncIterator<InformationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InformationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInformationSubscription>() => T;
}

export interface InformationEdge {
  node: Information;
  cursor: String;
}

export interface InformationEdgePromise
  extends Promise<InformationEdge>,
    Fragmentable {
  node: <T = InformationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InformationEdgeSubscription
  extends Promise<AsyncIterator<InformationEdge>>,
    Fragmentable {
  node: <T = InformationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInformation {
  count: Int;
}

export interface AggregateInformationPromise
  extends Promise<AggregateInformation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInformationSubscription
  extends Promise<AsyncIterator<AggregateInformation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MainView {
  id: ID_Output;
  division?: String;
  program?: String;
  duration?: String;
  singer?: String;
  thumbnail?: String;
  title?: String;
  videoId?: String;
  ranking?: Int;
  publishedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MainViewPromise extends Promise<MainView>, Fragmentable {
  id: () => Promise<ID_Output>;
  division: () => Promise<String>;
  program: () => Promise<String>;
  duration: () => Promise<String>;
  singer: () => Promise<String>;
  thumbnail: () => Promise<String>;
  title: () => Promise<String>;
  videoId: () => Promise<String>;
  ranking: () => Promise<Int>;
  publishedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MainViewSubscription
  extends Promise<AsyncIterator<MainView>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  division: () => Promise<AsyncIterator<String>>;
  program: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<String>>;
  singer: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  videoId: () => Promise<AsyncIterator<String>>;
  ranking: () => Promise<AsyncIterator<Int>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MainViewNullablePromise
  extends Promise<MainView | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  division: () => Promise<String>;
  program: () => Promise<String>;
  duration: () => Promise<String>;
  singer: () => Promise<String>;
  thumbnail: () => Promise<String>;
  title: () => Promise<String>;
  videoId: () => Promise<String>;
  ranking: () => Promise<Int>;
  publishedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MainViewConnection {
  pageInfo: PageInfo;
  edges: MainViewEdge[];
}

export interface MainViewConnectionPromise
  extends Promise<MainViewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MainViewEdge>>() => T;
  aggregate: <T = AggregateMainViewPromise>() => T;
}

export interface MainViewConnectionSubscription
  extends Promise<AsyncIterator<MainViewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MainViewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMainViewSubscription>() => T;
}

export interface MainViewEdge {
  node: MainView;
  cursor: String;
}

export interface MainViewEdgePromise
  extends Promise<MainViewEdge>,
    Fragmentable {
  node: <T = MainViewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MainViewEdgeSubscription
  extends Promise<AsyncIterator<MainViewEdge>>,
    Fragmentable {
  node: <T = MainViewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMainView {
  count: Int;
}

export interface AggregateMainViewPromise
  extends Promise<AggregateMainView>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMainViewSubscription
  extends Promise<AsyncIterator<AggregateMainView>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Video {
  id: ID_Output;
  division?: String;
  program?: String;
  duration?: String;
  singer?: String;
  thumbnail?: String;
  title?: String;
  videoId?: String;
  publishedAt?: DateTimeOutput;
  mainRegister?: Boolean;
  album?: String;
  songId?: String;
  releaseDate?: String;
  like?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VideoPromise extends Promise<Video>, Fragmentable {
  id: () => Promise<ID_Output>;
  division: () => Promise<String>;
  program: () => Promise<String>;
  duration: () => Promise<String>;
  singer: () => Promise<String>;
  thumbnail: () => Promise<String>;
  title: () => Promise<String>;
  videoId: () => Promise<String>;
  publishedAt: () => Promise<DateTimeOutput>;
  mainRegister: () => Promise<Boolean>;
  album: () => Promise<String>;
  songId: () => Promise<String>;
  releaseDate: () => Promise<String>;
  like: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VideoSubscription
  extends Promise<AsyncIterator<Video>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  division: () => Promise<AsyncIterator<String>>;
  program: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<String>>;
  singer: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  videoId: () => Promise<AsyncIterator<String>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  mainRegister: () => Promise<AsyncIterator<Boolean>>;
  album: () => Promise<AsyncIterator<String>>;
  songId: () => Promise<AsyncIterator<String>>;
  releaseDate: () => Promise<AsyncIterator<String>>;
  like: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VideoNullablePromise
  extends Promise<Video | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  division: () => Promise<String>;
  program: () => Promise<String>;
  duration: () => Promise<String>;
  singer: () => Promise<String>;
  thumbnail: () => Promise<String>;
  title: () => Promise<String>;
  videoId: () => Promise<String>;
  publishedAt: () => Promise<DateTimeOutput>;
  mainRegister: () => Promise<Boolean>;
  album: () => Promise<String>;
  songId: () => Promise<String>;
  releaseDate: () => Promise<String>;
  like: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VideoConnection {
  pageInfo: PageInfo;
  edges: VideoEdge[];
}

export interface VideoConnectionPromise
  extends Promise<VideoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VideoEdge>>() => T;
  aggregate: <T = AggregateVideoPromise>() => T;
}

export interface VideoConnectionSubscription
  extends Promise<AsyncIterator<VideoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VideoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVideoSubscription>() => T;
}

export interface VideoEdge {
  node: Video;
  cursor: String;
}

export interface VideoEdgePromise extends Promise<VideoEdge>, Fragmentable {
  node: <T = VideoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VideoEdgeSubscription
  extends Promise<AsyncIterator<VideoEdge>>,
    Fragmentable {
  node: <T = VideoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVideo {
  count: Int;
}

export interface AggregateVideoPromise
  extends Promise<AggregateVideo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVideoSubscription
  extends Promise<AsyncIterator<AggregateVideo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GenerationVideoSubscriptionPayload {
  mutation: MutationType;
  node: GenerationVideo;
  updatedFields: String[];
  previousValues: GenerationVideoPreviousValues;
}

export interface GenerationVideoSubscriptionPayloadPromise
  extends Promise<GenerationVideoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GenerationVideoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GenerationVideoPreviousValuesPromise>() => T;
}

export interface GenerationVideoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GenerationVideoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GenerationVideoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GenerationVideoPreviousValuesSubscription>() => T;
}

export interface GenerationVideoPreviousValues {
  id: ID_Output;
  division?: String;
  program?: String;
  duration?: String;
  singer?: String;
  thumbnail?: String;
  title?: String;
  videoId?: String;
  ranking?: Int;
  publishedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GenerationVideoPreviousValuesPromise
  extends Promise<GenerationVideoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  division: () => Promise<String>;
  program: () => Promise<String>;
  duration: () => Promise<String>;
  singer: () => Promise<String>;
  thumbnail: () => Promise<String>;
  title: () => Promise<String>;
  videoId: () => Promise<String>;
  ranking: () => Promise<Int>;
  publishedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GenerationVideoPreviousValuesSubscription
  extends Promise<AsyncIterator<GenerationVideoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  division: () => Promise<AsyncIterator<String>>;
  program: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<String>>;
  singer: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  videoId: () => Promise<AsyncIterator<String>>;
  ranking: () => Promise<AsyncIterator<Int>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InformationSubscriptionPayload {
  mutation: MutationType;
  node: Information;
  updatedFields: String[];
  previousValues: InformationPreviousValues;
}

export interface InformationSubscriptionPayloadPromise
  extends Promise<InformationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InformationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InformationPreviousValuesPromise>() => T;
}

export interface InformationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InformationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InformationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InformationPreviousValuesSubscription>() => T;
}

export interface InformationPreviousValues {
  id: ID_Output;
}

export interface InformationPreviousValuesPromise
  extends Promise<InformationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface InformationPreviousValuesSubscription
  extends Promise<AsyncIterator<InformationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface MainViewSubscriptionPayload {
  mutation: MutationType;
  node: MainView;
  updatedFields: String[];
  previousValues: MainViewPreviousValues;
}

export interface MainViewSubscriptionPayloadPromise
  extends Promise<MainViewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MainViewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MainViewPreviousValuesPromise>() => T;
}

export interface MainViewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MainViewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MainViewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MainViewPreviousValuesSubscription>() => T;
}

export interface MainViewPreviousValues {
  id: ID_Output;
  division?: String;
  program?: String;
  duration?: String;
  singer?: String;
  thumbnail?: String;
  title?: String;
  videoId?: String;
  ranking?: Int;
  publishedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MainViewPreviousValuesPromise
  extends Promise<MainViewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  division: () => Promise<String>;
  program: () => Promise<String>;
  duration: () => Promise<String>;
  singer: () => Promise<String>;
  thumbnail: () => Promise<String>;
  title: () => Promise<String>;
  videoId: () => Promise<String>;
  ranking: () => Promise<Int>;
  publishedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MainViewPreviousValuesSubscription
  extends Promise<AsyncIterator<MainViewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  division: () => Promise<AsyncIterator<String>>;
  program: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<String>>;
  singer: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  videoId: () => Promise<AsyncIterator<String>>;
  ranking: () => Promise<AsyncIterator<Int>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VideoSubscriptionPayload {
  mutation: MutationType;
  node: Video;
  updatedFields: String[];
  previousValues: VideoPreviousValues;
}

export interface VideoSubscriptionPayloadPromise
  extends Promise<VideoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VideoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VideoPreviousValuesPromise>() => T;
}

export interface VideoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VideoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VideoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VideoPreviousValuesSubscription>() => T;
}

export interface VideoPreviousValues {
  id: ID_Output;
  division?: String;
  program?: String;
  duration?: String;
  singer?: String;
  thumbnail?: String;
  title?: String;
  videoId?: String;
  publishedAt?: DateTimeOutput;
  mainRegister?: Boolean;
  album?: String;
  songId?: String;
  releaseDate?: String;
  like?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VideoPreviousValuesPromise
  extends Promise<VideoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  division: () => Promise<String>;
  program: () => Promise<String>;
  duration: () => Promise<String>;
  singer: () => Promise<String>;
  thumbnail: () => Promise<String>;
  title: () => Promise<String>;
  videoId: () => Promise<String>;
  publishedAt: () => Promise<DateTimeOutput>;
  mainRegister: () => Promise<Boolean>;
  album: () => Promise<String>;
  songId: () => Promise<String>;
  releaseDate: () => Promise<String>;
  like: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VideoPreviousValuesSubscription
  extends Promise<AsyncIterator<VideoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  division: () => Promise<AsyncIterator<String>>;
  program: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<String>>;
  singer: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  videoId: () => Promise<AsyncIterator<String>>;
  publishedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  mainRegister: () => Promise<AsyncIterator<Boolean>>;
  album: () => Promise<AsyncIterator<String>>;
  songId: () => Promise<AsyncIterator<String>>;
  releaseDate: () => Promise<AsyncIterator<String>>;
  like: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Video",
    embedded: false
  },
  {
    name: "GenerationVideo",
    embedded: false
  },
  {
    name: "MainView",
    embedded: false
  },
  {
    name: "Information",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
