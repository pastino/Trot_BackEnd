// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  like: (where?: LikeWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  notice: (where?: NoticeWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  repply: (where?: RepplyWhereInput) => Promise<boolean>;
  room: (where?: RoomWhereInput) => Promise<boolean>;
  suggestion: (where?: SuggestionWhereInput) => Promise<boolean>;
  talk: (where?: TalkWhereInput) => Promise<boolean>;
  talkComment: (where?: TalkCommentWhereInput) => Promise<boolean>;
  talkRepply: (where?: TalkRepplyWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  file: (where: FileWhereUniqueInput) => FileNullablePromise;
  files: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<File>;
  filesConnection: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FileConnectionPromise;
  like: (where: LikeWhereUniqueInput) => LikeNullablePromise;
  likes: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Like>;
  likesConnection: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LikeConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  notice: (where: NoticeWhereUniqueInput) => NoticeNullablePromise;
  notices: (args?: {
    where?: NoticeWhereInput;
    orderBy?: NoticeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notice>;
  noticesConnection: (args?: {
    where?: NoticeWhereInput;
    orderBy?: NoticeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NoticeConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  repply: (where: RepplyWhereUniqueInput) => RepplyNullablePromise;
  repplies: (args?: {
    where?: RepplyWhereInput;
    orderBy?: RepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Repply>;
  reppliesConnection: (args?: {
    where?: RepplyWhereInput;
    orderBy?: RepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RepplyConnectionPromise;
  room: (where: RoomWhereUniqueInput) => RoomNullablePromise;
  rooms: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Room>;
  roomsConnection: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoomConnectionPromise;
  suggestion: (where: SuggestionWhereUniqueInput) => SuggestionNullablePromise;
  suggestions: (args?: {
    where?: SuggestionWhereInput;
    orderBy?: SuggestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Suggestion>;
  suggestionsConnection: (args?: {
    where?: SuggestionWhereInput;
    orderBy?: SuggestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SuggestionConnectionPromise;
  talk: (where: TalkWhereUniqueInput) => TalkNullablePromise;
  talks: (args?: {
    where?: TalkWhereInput;
    orderBy?: TalkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Talk>;
  talksConnection: (args?: {
    where?: TalkWhereInput;
    orderBy?: TalkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TalkConnectionPromise;
  talkComment: (
    where: TalkCommentWhereUniqueInput
  ) => TalkCommentNullablePromise;
  talkComments: (args?: {
    where?: TalkCommentWhereInput;
    orderBy?: TalkCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TalkComment>;
  talkCommentsConnection: (args?: {
    where?: TalkCommentWhereInput;
    orderBy?: TalkCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TalkCommentConnectionPromise;
  talkRepply: (where: TalkRepplyWhereUniqueInput) => TalkRepplyNullablePromise;
  talkRepplies: (args?: {
    where?: TalkRepplyWhereInput;
    orderBy?: TalkRepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TalkRepply>;
  talkReppliesConnection: (args?: {
    where?: TalkRepplyWhereInput;
    orderBy?: TalkRepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TalkRepplyConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (args: {
    data: FileUpdateInput;
    where: FileWhereUniqueInput;
  }) => FilePromise;
  updateManyFiles: (args: {
    data: FileUpdateManyMutationInput;
    where?: FileWhereInput;
  }) => BatchPayloadPromise;
  upsertFile: (args: {
    where: FileWhereUniqueInput;
    create: FileCreateInput;
    update: FileUpdateInput;
  }) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createLike: (data: LikeCreateInput) => LikePromise;
  updateLike: (args: {
    data: LikeUpdateInput;
    where: LikeWhereUniqueInput;
  }) => LikePromise;
  upsertLike: (args: {
    where: LikeWhereUniqueInput;
    create: LikeCreateInput;
    update: LikeUpdateInput;
  }) => LikePromise;
  deleteLike: (where: LikeWhereUniqueInput) => LikePromise;
  deleteManyLikes: (where?: LikeWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createNotice: (data: NoticeCreateInput) => NoticePromise;
  updateNotice: (args: {
    data: NoticeUpdateInput;
    where: NoticeWhereUniqueInput;
  }) => NoticePromise;
  updateManyNotices: (args: {
    data: NoticeUpdateManyMutationInput;
    where?: NoticeWhereInput;
  }) => BatchPayloadPromise;
  upsertNotice: (args: {
    where: NoticeWhereUniqueInput;
    create: NoticeCreateInput;
    update: NoticeUpdateInput;
  }) => NoticePromise;
  deleteNotice: (where: NoticeWhereUniqueInput) => NoticePromise;
  deleteManyNotices: (where?: NoticeWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createRepply: (data: RepplyCreateInput) => RepplyPromise;
  updateRepply: (args: {
    data: RepplyUpdateInput;
    where: RepplyWhereUniqueInput;
  }) => RepplyPromise;
  updateManyRepplies: (args: {
    data: RepplyUpdateManyMutationInput;
    where?: RepplyWhereInput;
  }) => BatchPayloadPromise;
  upsertRepply: (args: {
    where: RepplyWhereUniqueInput;
    create: RepplyCreateInput;
    update: RepplyUpdateInput;
  }) => RepplyPromise;
  deleteRepply: (where: RepplyWhereUniqueInput) => RepplyPromise;
  deleteManyRepplies: (where?: RepplyWhereInput) => BatchPayloadPromise;
  createRoom: (data: RoomCreateInput) => RoomPromise;
  updateRoom: (args: {
    data: RoomUpdateInput;
    where: RoomWhereUniqueInput;
  }) => RoomPromise;
  upsertRoom: (args: {
    where: RoomWhereUniqueInput;
    create: RoomCreateInput;
    update: RoomUpdateInput;
  }) => RoomPromise;
  deleteRoom: (where: RoomWhereUniqueInput) => RoomPromise;
  deleteManyRooms: (where?: RoomWhereInput) => BatchPayloadPromise;
  createSuggestion: (data: SuggestionCreateInput) => SuggestionPromise;
  updateSuggestion: (args: {
    data: SuggestionUpdateInput;
    where: SuggestionWhereUniqueInput;
  }) => SuggestionPromise;
  updateManySuggestions: (args: {
    data: SuggestionUpdateManyMutationInput;
    where?: SuggestionWhereInput;
  }) => BatchPayloadPromise;
  upsertSuggestion: (args: {
    where: SuggestionWhereUniqueInput;
    create: SuggestionCreateInput;
    update: SuggestionUpdateInput;
  }) => SuggestionPromise;
  deleteSuggestion: (where: SuggestionWhereUniqueInput) => SuggestionPromise;
  deleteManySuggestions: (where?: SuggestionWhereInput) => BatchPayloadPromise;
  createTalk: (data: TalkCreateInput) => TalkPromise;
  updateTalk: (args: {
    data: TalkUpdateInput;
    where: TalkWhereUniqueInput;
  }) => TalkPromise;
  updateManyTalks: (args: {
    data: TalkUpdateManyMutationInput;
    where?: TalkWhereInput;
  }) => BatchPayloadPromise;
  upsertTalk: (args: {
    where: TalkWhereUniqueInput;
    create: TalkCreateInput;
    update: TalkUpdateInput;
  }) => TalkPromise;
  deleteTalk: (where: TalkWhereUniqueInput) => TalkPromise;
  deleteManyTalks: (where?: TalkWhereInput) => BatchPayloadPromise;
  createTalkComment: (data: TalkCommentCreateInput) => TalkCommentPromise;
  updateTalkComment: (args: {
    data: TalkCommentUpdateInput;
    where: TalkCommentWhereUniqueInput;
  }) => TalkCommentPromise;
  updateManyTalkComments: (args: {
    data: TalkCommentUpdateManyMutationInput;
    where?: TalkCommentWhereInput;
  }) => BatchPayloadPromise;
  upsertTalkComment: (args: {
    where: TalkCommentWhereUniqueInput;
    create: TalkCommentCreateInput;
    update: TalkCommentUpdateInput;
  }) => TalkCommentPromise;
  deleteTalkComment: (where: TalkCommentWhereUniqueInput) => TalkCommentPromise;
  deleteManyTalkComments: (
    where?: TalkCommentWhereInput
  ) => BatchPayloadPromise;
  createTalkRepply: (data: TalkRepplyCreateInput) => TalkRepplyPromise;
  updateTalkRepply: (args: {
    data: TalkRepplyUpdateInput;
    where: TalkRepplyWhereUniqueInput;
  }) => TalkRepplyPromise;
  updateManyTalkRepplies: (args: {
    data: TalkRepplyUpdateManyMutationInput;
    where?: TalkRepplyWhereInput;
  }) => BatchPayloadPromise;
  upsertTalkRepply: (args: {
    where: TalkRepplyWhereUniqueInput;
    create: TalkRepplyCreateInput;
    update: TalkRepplyUpdateInput;
  }) => TalkRepplyPromise;
  deleteTalkRepply: (where: TalkRepplyWhereUniqueInput) => TalkRepplyPromise;
  deleteManyTalkRepplies: (where?: TalkRepplyWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  like: (
    where?: LikeSubscriptionWhereInput
  ) => LikeSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  notice: (
    where?: NoticeSubscriptionWhereInput
  ) => NoticeSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  repply: (
    where?: RepplySubscriptionWhereInput
  ) => RepplySubscriptionPayloadSubscription;
  room: (
    where?: RoomSubscriptionWhereInput
  ) => RoomSubscriptionPayloadSubscription;
  suggestion: (
    where?: SuggestionSubscriptionWhereInput
  ) => SuggestionSubscriptionPayloadSubscription;
  talk: (
    where?: TalkSubscriptionWhereInput
  ) => TalkSubscriptionPayloadSubscription;
  talkComment: (
    where?: TalkCommentSubscriptionWhereInput
  ) => TalkCommentSubscriptionPayloadSubscription;
  talkRepply: (
    where?: TalkRepplySubscriptionWhereInput
  ) => TalkRepplySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TalkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "talkCommentCounts_ASC"
  | "talkCommentCounts_DESC"
  | "talkRepplyCounts_ASC"
  | "talkRepplyCounts_DESC"
  | "talkText_ASC"
  | "talkText_DESC"
  | "division_ASC"
  | "division_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TalkCommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TalkRepplyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "dateOfBirth_ASC"
  | "dateOfBirth_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "password_ASC"
  | "password_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "isFollowing_ASC"
  | "isFollowing_DESC"
  | "isSelf_ASC"
  | "isSelf_DESC"
  | "postCounts_ASC"
  | "postCounts_DESC"
  | "useTermsPrivacyagreement_ASC"
  | "useTermsPrivacyagreement_DESC"
  | "snsLogin_ASC"
  | "snsLogin_DESC"
  | "loginSecret_ASC"
  | "loginSecret_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "isLiked_ASC"
  | "isLiked_DESC"
  | "likeCount_ASC"
  | "likeCount_DESC"
  | "commentCounts_ASC"
  | "commentCounts_DESC"
  | "postPrivate_ASC"
  | "postPrivate_DESC"
  | "repplyCounts_ASC"
  | "repplyCounts_DESC"
  | "assortment_ASC"
  | "assortment_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "postRatio_ASC"
  | "postRatio_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LikeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RepplyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RoomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SuggestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "image_ASC"
  | "image_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NoticeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TalkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  talkComments_every?: Maybe<TalkCommentWhereInput>;
  talkComments_some?: Maybe<TalkCommentWhereInput>;
  talkComments_none?: Maybe<TalkCommentWhereInput>;
  talkRepplies_every?: Maybe<TalkRepplyWhereInput>;
  talkRepplies_some?: Maybe<TalkRepplyWhereInput>;
  talkRepplies_none?: Maybe<TalkRepplyWhereInput>;
  talkCommentCounts?: Maybe<Int>;
  talkCommentCounts_not?: Maybe<Int>;
  talkCommentCounts_in?: Maybe<Int[] | Int>;
  talkCommentCounts_not_in?: Maybe<Int[] | Int>;
  talkCommentCounts_lt?: Maybe<Int>;
  talkCommentCounts_lte?: Maybe<Int>;
  talkCommentCounts_gt?: Maybe<Int>;
  talkCommentCounts_gte?: Maybe<Int>;
  talkRepplyCounts?: Maybe<Int>;
  talkRepplyCounts_not?: Maybe<Int>;
  talkRepplyCounts_in?: Maybe<Int[] | Int>;
  talkRepplyCounts_not_in?: Maybe<Int[] | Int>;
  talkRepplyCounts_lt?: Maybe<Int>;
  talkRepplyCounts_lte?: Maybe<Int>;
  talkRepplyCounts_gt?: Maybe<Int>;
  talkRepplyCounts_gte?: Maybe<Int>;
  talkText?: Maybe<String>;
  talkText_not?: Maybe<String>;
  talkText_in?: Maybe<String[] | String>;
  talkText_not_in?: Maybe<String[] | String>;
  talkText_lt?: Maybe<String>;
  talkText_lte?: Maybe<String>;
  talkText_gt?: Maybe<String>;
  talkText_gte?: Maybe<String>;
  talkText_contains?: Maybe<String>;
  talkText_not_contains?: Maybe<String>;
  talkText_starts_with?: Maybe<String>;
  talkText_not_starts_with?: Maybe<String>;
  talkText_ends_with?: Maybe<String>;
  talkText_not_ends_with?: Maybe<String>;
  division?: Maybe<String>;
  division_not?: Maybe<String>;
  division_in?: Maybe<String[] | String>;
  division_not_in?: Maybe<String[] | String>;
  division_lt?: Maybe<String>;
  division_lte?: Maybe<String>;
  division_gt?: Maybe<String>;
  division_gte?: Maybe<String>;
  division_contains?: Maybe<String>;
  division_not_contains?: Maybe<String>;
  division_starts_with?: Maybe<String>;
  division_not_starts_with?: Maybe<String>;
  division_ends_with?: Maybe<String>;
  division_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TalkWhereInput[] | TalkWhereInput>;
  OR?: Maybe<TalkWhereInput[] | TalkWhereInput>;
  NOT?: Maybe<TalkWhereInput[] | TalkWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  dateOfBirth_not?: Maybe<Int>;
  dateOfBirth_in?: Maybe<Int[] | Int>;
  dateOfBirth_not_in?: Maybe<Int[] | Int>;
  dateOfBirth_lt?: Maybe<Int>;
  dateOfBirth_lte?: Maybe<Int>;
  dateOfBirth_gt?: Maybe<Int>;
  dateOfBirth_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  talks_every?: Maybe<TalkWhereInput>;
  talks_some?: Maybe<TalkWhereInput>;
  talks_none?: Maybe<TalkWhereInput>;
  talkComments_every?: Maybe<TalkCommentWhereInput>;
  talkComments_some?: Maybe<TalkCommentWhereInput>;
  talkComments_none?: Maybe<TalkCommentWhereInput>;
  talkRepplies_every?: Maybe<TalkRepplyWhereInput>;
  talkRepplies_some?: Maybe<TalkRepplyWhereInput>;
  talkRepplies_none?: Maybe<TalkRepplyWhereInput>;
  following_every?: Maybe<UserWhereInput>;
  following_some?: Maybe<UserWhereInput>;
  following_none?: Maybe<UserWhereInput>;
  followers_every?: Maybe<UserWhereInput>;
  followers_some?: Maybe<UserWhereInput>;
  followers_none?: Maybe<UserWhereInput>;
  isFollowing?: Maybe<Boolean>;
  isFollowing_not?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  isSelf_not?: Maybe<Boolean>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  postCounts?: Maybe<Int>;
  postCounts_not?: Maybe<Int>;
  postCounts_in?: Maybe<Int[] | Int>;
  postCounts_not_in?: Maybe<Int[] | Int>;
  postCounts_lt?: Maybe<Int>;
  postCounts_lte?: Maybe<Int>;
  postCounts_gt?: Maybe<Int>;
  postCounts_gte?: Maybe<Int>;
  likes_every?: Maybe<LikeWhereInput>;
  likes_some?: Maybe<LikeWhereInput>;
  likes_none?: Maybe<LikeWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  repplies_every?: Maybe<RepplyWhereInput>;
  repplies_some?: Maybe<RepplyWhereInput>;
  repplies_none?: Maybe<RepplyWhereInput>;
  rooms_every?: Maybe<RoomWhereInput>;
  rooms_some?: Maybe<RoomWhereInput>;
  rooms_none?: Maybe<RoomWhereInput>;
  suggestions_every?: Maybe<SuggestionWhereInput>;
  suggestions_some?: Maybe<SuggestionWhereInput>;
  suggestions_none?: Maybe<SuggestionWhereInput>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  useTermsPrivacyagreement_not?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  snsLogin_not?: Maybe<String>;
  snsLogin_in?: Maybe<String[] | String>;
  snsLogin_not_in?: Maybe<String[] | String>;
  snsLogin_lt?: Maybe<String>;
  snsLogin_lte?: Maybe<String>;
  snsLogin_gt?: Maybe<String>;
  snsLogin_gte?: Maybe<String>;
  snsLogin_contains?: Maybe<String>;
  snsLogin_not_contains?: Maybe<String>;
  snsLogin_starts_with?: Maybe<String>;
  snsLogin_not_starts_with?: Maybe<String>;
  snsLogin_ends_with?: Maybe<String>;
  snsLogin_not_ends_with?: Maybe<String>;
  loginSecret?: Maybe<String>;
  loginSecret_not?: Maybe<String>;
  loginSecret_in?: Maybe<String[] | String>;
  loginSecret_not_in?: Maybe<String[] | String>;
  loginSecret_lt?: Maybe<String>;
  loginSecret_lte?: Maybe<String>;
  loginSecret_gt?: Maybe<String>;
  loginSecret_gte?: Maybe<String>;
  loginSecret_contains?: Maybe<String>;
  loginSecret_not_contains?: Maybe<String>;
  loginSecret_starts_with?: Maybe<String>;
  loginSecret_not_starts_with?: Maybe<String>;
  loginSecret_ends_with?: Maybe<String>;
  loginSecret_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface TalkCommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  talk?: Maybe<TalkWhereInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  talkRepplies_every?: Maybe<TalkRepplyWhereInput>;
  talkRepplies_some?: Maybe<TalkRepplyWhereInput>;
  talkRepplies_none?: Maybe<TalkRepplyWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TalkCommentWhereInput[] | TalkCommentWhereInput>;
  OR?: Maybe<TalkCommentWhereInput[] | TalkCommentWhereInput>;
  NOT?: Maybe<TalkCommentWhereInput[] | TalkCommentWhereInput>;
}

export interface TalkRepplyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  talkComment?: Maybe<TalkCommentWhereInput>;
  talk?: Maybe<TalkWhereInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TalkRepplyWhereInput[] | TalkRepplyWhereInput>;
  OR?: Maybe<TalkRepplyWhereInput[] | TalkRepplyWhereInput>;
  NOT?: Maybe<TalkRepplyWhereInput[] | TalkRepplyWhereInput>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  files_every?: Maybe<FileWhereInput>;
  files_some?: Maybe<FileWhereInput>;
  files_none?: Maybe<FileWhereInput>;
  likes_every?: Maybe<LikeWhereInput>;
  likes_some?: Maybe<LikeWhereInput>;
  likes_none?: Maybe<LikeWhereInput>;
  isLiked?: Maybe<Boolean>;
  isLiked_not?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  likeCount_not?: Maybe<Int>;
  likeCount_in?: Maybe<Int[] | Int>;
  likeCount_not_in?: Maybe<Int[] | Int>;
  likeCount_lt?: Maybe<Int>;
  likeCount_lte?: Maybe<Int>;
  likeCount_gt?: Maybe<Int>;
  likeCount_gte?: Maybe<Int>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  repplies_every?: Maybe<RepplyWhereInput>;
  repplies_some?: Maybe<RepplyWhereInput>;
  repplies_none?: Maybe<RepplyWhereInput>;
  commentCounts?: Maybe<Int>;
  commentCounts_not?: Maybe<Int>;
  commentCounts_in?: Maybe<Int[] | Int>;
  commentCounts_not_in?: Maybe<Int[] | Int>;
  commentCounts_lt?: Maybe<Int>;
  commentCounts_lte?: Maybe<Int>;
  commentCounts_gt?: Maybe<Int>;
  commentCounts_gte?: Maybe<Int>;
  postPrivate?: Maybe<Boolean>;
  postPrivate_not?: Maybe<Boolean>;
  repplyCounts?: Maybe<Int>;
  repplyCounts_not?: Maybe<Int>;
  repplyCounts_in?: Maybe<Int[] | Int>;
  repplyCounts_not_in?: Maybe<Int[] | Int>;
  repplyCounts_lt?: Maybe<Int>;
  repplyCounts_lte?: Maybe<Int>;
  repplyCounts_gt?: Maybe<Int>;
  repplyCounts_gte?: Maybe<Int>;
  assortment?: Maybe<String>;
  assortment_not?: Maybe<String>;
  assortment_in?: Maybe<String[] | String>;
  assortment_not_in?: Maybe<String[] | String>;
  assortment_lt?: Maybe<String>;
  assortment_lte?: Maybe<String>;
  assortment_gt?: Maybe<String>;
  assortment_gte?: Maybe<String>;
  assortment_contains?: Maybe<String>;
  assortment_not_contains?: Maybe<String>;
  assortment_starts_with?: Maybe<String>;
  assortment_not_starts_with?: Maybe<String>;
  assortment_ends_with?: Maybe<String>;
  assortment_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface FileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  postRatio?: Maybe<Float>;
  postRatio_not?: Maybe<Float>;
  postRatio_in?: Maybe<Float[] | Float>;
  postRatio_not_in?: Maybe<Float[] | Float>;
  postRatio_lt?: Maybe<Float>;
  postRatio_lte?: Maybe<Float>;
  postRatio_gt?: Maybe<Float>;
  postRatio_gte?: Maybe<Float>;
  post?: Maybe<PostWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FileWhereInput[] | FileWhereInput>;
  OR?: Maybe<FileWhereInput[] | FileWhereInput>;
  NOT?: Maybe<FileWhereInput[] | FileWhereInput>;
}

export interface LikeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  post?: Maybe<PostWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<LikeWhereInput[] | LikeWhereInput>;
  OR?: Maybe<LikeWhereInput[] | LikeWhereInput>;
  NOT?: Maybe<LikeWhereInput[] | LikeWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  post?: Maybe<PostWhereInput>;
  repply_every?: Maybe<RepplyWhereInput>;
  repply_some?: Maybe<RepplyWhereInput>;
  repply_none?: Maybe<RepplyWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface RepplyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  comment?: Maybe<CommentWhereInput>;
  post?: Maybe<PostWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RepplyWhereInput[] | RepplyWhereInput>;
  OR?: Maybe<RepplyWhereInput[] | RepplyWhereInput>;
  NOT?: Maybe<RepplyWhereInput[] | RepplyWhereInput>;
}

export interface RoomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  participants_every?: Maybe<UserWhereInput>;
  participants_some?: Maybe<UserWhereInput>;
  participants_none?: Maybe<UserWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RoomWhereInput[] | RoomWhereInput>;
  OR?: Maybe<RoomWhereInput[] | RoomWhereInput>;
  NOT?: Maybe<RoomWhereInput[] | RoomWhereInput>;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  from?: Maybe<UserWhereInput>;
  to?: Maybe<UserWhereInput>;
  room?: Maybe<RoomWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface SuggestionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SuggestionWhereInput[] | SuggestionWhereInput>;
  OR?: Maybe<SuggestionWhereInput[] | SuggestionWhereInput>;
  NOT?: Maybe<SuggestionWhereInput[] | SuggestionWhereInput>;
}

export type FileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type LikeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type NoticeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NoticeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NoticeWhereInput[] | NoticeWhereInput>;
  OR?: Maybe<NoticeWhereInput[] | NoticeWhereInput>;
  NOT?: Maybe<NoticeWhereInput[] | NoticeWhereInput>;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RepplyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RoomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SuggestionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TalkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TalkCommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TalkRepplyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  nickname?: Maybe<String>;
  userId?: Maybe<String>;
}>;

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
  post?: Maybe<PostCreateOneWithoutCommentsInput>;
  repply?: Maybe<RepplyCreateManyWithoutCommentInput>;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickname: String;
  dateOfBirth: Int;
  userId: String;
  password?: Maybe<String>;
  gender: String;
  bio?: Maybe<String>;
  talks?: Maybe<TalkCreateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentCreateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  repplies?: Maybe<RepplyCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionCreateManyWithoutUserInput>;
  useTermsPrivacyagreement: Boolean;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface TalkCreateManyWithoutUserInput {
  create?: Maybe<TalkCreateWithoutUserInput[] | TalkCreateWithoutUserInput>;
  connect?: Maybe<TalkWhereUniqueInput[] | TalkWhereUniqueInput>;
}

export interface TalkCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  talkComments?: Maybe<TalkCommentCreateManyWithoutTalkInput>;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutTalkInput>;
  talkCommentCounts?: Maybe<Int>;
  talkRepplyCounts?: Maybe<Int>;
  talkText: String;
  division: String;
}

export interface TalkCommentCreateManyWithoutTalkInput {
  create?: Maybe<
    TalkCommentCreateWithoutTalkInput[] | TalkCommentCreateWithoutTalkInput
  >;
  connect?: Maybe<TalkCommentWhereUniqueInput[] | TalkCommentWhereUniqueInput>;
}

export interface TalkCommentCreateWithoutTalkInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutTalkCommentsInput>;
  text: String;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutTalkCommentInput>;
}

export interface UserCreateOneWithoutTalkCommentsInput {
  create?: Maybe<UserCreateWithoutTalkCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutTalkCommentsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickname: String;
  dateOfBirth: Int;
  userId: String;
  password?: Maybe<String>;
  gender: String;
  bio?: Maybe<String>;
  talks?: Maybe<TalkCreateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  repplies?: Maybe<RepplyCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionCreateManyWithoutUserInput>;
  useTermsPrivacyagreement: Boolean;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface TalkRepplyCreateManyWithoutUserInput {
  create?: Maybe<
    TalkRepplyCreateWithoutUserInput[] | TalkRepplyCreateWithoutUserInput
  >;
  connect?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
}

export interface TalkRepplyCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  talkComment: TalkCommentCreateOneWithoutTalkReppliesInput;
  talk: TalkCreateOneWithoutTalkReppliesInput;
  text: String;
}

export interface TalkCommentCreateOneWithoutTalkReppliesInput {
  create?: Maybe<TalkCommentCreateWithoutTalkReppliesInput>;
  connect?: Maybe<TalkCommentWhereUniqueInput>;
}

export interface TalkCommentCreateWithoutTalkReppliesInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutTalkCommentsInput>;
  talk: TalkCreateOneWithoutTalkCommentsInput;
  text: String;
}

export interface TalkCreateOneWithoutTalkCommentsInput {
  create?: Maybe<TalkCreateWithoutTalkCommentsInput>;
  connect?: Maybe<TalkWhereUniqueInput>;
}

export interface TalkCreateWithoutTalkCommentsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutTalksInput;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutTalkInput>;
  talkCommentCounts?: Maybe<Int>;
  talkRepplyCounts?: Maybe<Int>;
  talkText: String;
  division: String;
}

export interface UserCreateOneWithoutTalksInput {
  create?: Maybe<UserCreateWithoutTalksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutTalksInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickname: String;
  dateOfBirth: Int;
  userId: String;
  password?: Maybe<String>;
  gender: String;
  bio?: Maybe<String>;
  talkComments?: Maybe<TalkCommentCreateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  repplies?: Maybe<RepplyCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionCreateManyWithoutUserInput>;
  useTermsPrivacyagreement: Boolean;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface TalkCommentCreateManyWithoutUserInput {
  create?: Maybe<
    TalkCommentCreateWithoutUserInput[] | TalkCommentCreateWithoutUserInput
  >;
  connect?: Maybe<TalkCommentWhereUniqueInput[] | TalkCommentWhereUniqueInput>;
}

export interface TalkCommentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  talk: TalkCreateOneWithoutTalkCommentsInput;
  text: String;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutTalkCommentInput>;
}

export interface TalkRepplyCreateManyWithoutTalkCommentInput {
  create?: Maybe<
    | TalkRepplyCreateWithoutTalkCommentInput[]
    | TalkRepplyCreateWithoutTalkCommentInput
  >;
  connect?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
}

export interface TalkRepplyCreateWithoutTalkCommentInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutTalkReppliesInput>;
  talk: TalkCreateOneWithoutTalkReppliesInput;
  text: String;
}

export interface UserCreateOneWithoutTalkReppliesInput {
  create?: Maybe<UserCreateWithoutTalkReppliesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutTalkReppliesInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickname: String;
  dateOfBirth: Int;
  userId: String;
  password?: Maybe<String>;
  gender: String;
  bio?: Maybe<String>;
  talks?: Maybe<TalkCreateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  repplies?: Maybe<RepplyCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionCreateManyWithoutUserInput>;
  useTermsPrivacyagreement: Boolean;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface UserCreateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowersInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickname: String;
  dateOfBirth: Int;
  userId: String;
  password?: Maybe<String>;
  gender: String;
  bio?: Maybe<String>;
  talks?: Maybe<TalkCreateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentCreateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  repplies?: Maybe<RepplyCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionCreateManyWithoutUserInput>;
  useTermsPrivacyagreement: Boolean;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface PostCreateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  caption: String;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  isLiked?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  repplies?: Maybe<RepplyCreateManyWithoutPostInput>;
  commentCounts?: Maybe<Int>;
  postPrivate: Boolean;
  repplyCounts?: Maybe<Int>;
  assortment: String;
}

export interface FileCreateManyWithoutPostInput {
  create?: Maybe<FileCreateWithoutPostInput[] | FileCreateWithoutPostInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
}

export interface FileCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  url: String;
  postRatio?: Maybe<Float>;
}

export interface LikeCreateManyWithoutPostInput {
  create?: Maybe<LikeCreateWithoutPostInput[] | LikeCreateWithoutPostInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
}

export interface LikeCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutLikesInput>;
}

export interface UserCreateOneWithoutLikesInput {
  create?: Maybe<UserCreateWithoutLikesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutLikesInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickname: String;
  dateOfBirth: Int;
  userId: String;
  password?: Maybe<String>;
  gender: String;
  bio?: Maybe<String>;
  talks?: Maybe<TalkCreateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentCreateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  repplies?: Maybe<RepplyCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionCreateManyWithoutUserInput>;
  useTermsPrivacyagreement: Boolean;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface UserCreateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowingInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickname: String;
  dateOfBirth: Int;
  userId: String;
  password?: Maybe<String>;
  gender: String;
  bio?: Maybe<String>;
  talks?: Maybe<TalkCreateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentCreateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutUserInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  repplies?: Maybe<RepplyCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionCreateManyWithoutUserInput>;
  useTermsPrivacyagreement: Boolean;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface LikeCreateManyWithoutUserInput {
  create?: Maybe<LikeCreateWithoutUserInput[] | LikeCreateWithoutUserInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
}

export interface LikeCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  post?: Maybe<PostCreateOneWithoutLikesInput>;
}

export interface PostCreateOneWithoutLikesInput {
  create?: Maybe<PostCreateWithoutLikesInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutLikesInput {
  id?: Maybe<ID_Input>;
  title: String;
  caption: String;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  isLiked?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  repplies?: Maybe<RepplyCreateManyWithoutPostInput>;
  commentCounts?: Maybe<Int>;
  postPrivate: Boolean;
  repplyCounts?: Maybe<Int>;
  assortment: String;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickname: String;
  dateOfBirth: Int;
  userId: String;
  password?: Maybe<String>;
  gender: String;
  bio?: Maybe<String>;
  talks?: Maybe<TalkCreateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentCreateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  repplies?: Maybe<RepplyCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionCreateManyWithoutUserInput>;
  useTermsPrivacyagreement: Boolean;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface CommentCreateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  text: String;
  post?: Maybe<PostCreateOneWithoutCommentsInput>;
  repply?: Maybe<RepplyCreateManyWithoutCommentInput>;
}

export interface PostCreateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  title: String;
  caption: String;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  isLiked?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  repplies?: Maybe<RepplyCreateManyWithoutPostInput>;
  commentCounts?: Maybe<Int>;
  postPrivate: Boolean;
  repplyCounts?: Maybe<Int>;
  assortment: String;
}

export interface RepplyCreateManyWithoutPostInput {
  create?: Maybe<RepplyCreateWithoutPostInput[] | RepplyCreateWithoutPostInput>;
  connect?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
}

export interface RepplyCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutReppliesInput>;
  comment: CommentCreateOneWithoutRepplyInput;
}

export interface UserCreateOneWithoutReppliesInput {
  create?: Maybe<UserCreateWithoutReppliesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutReppliesInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickname: String;
  dateOfBirth: Int;
  userId: String;
  password?: Maybe<String>;
  gender: String;
  bio?: Maybe<String>;
  talks?: Maybe<TalkCreateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentCreateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionCreateManyWithoutUserInput>;
  useTermsPrivacyagreement: Boolean;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface RoomCreateManyWithoutParticipantsInput {
  create?: Maybe<
    RoomCreateWithoutParticipantsInput[] | RoomCreateWithoutParticipantsInput
  >;
  connect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
}

export interface RoomCreateWithoutParticipantsInput {
  id?: Maybe<ID_Input>;
  messages?: Maybe<MessageCreateManyWithoutRoomInput>;
}

export interface MessageCreateManyWithoutRoomInput {
  create?: Maybe<
    MessageCreateWithoutRoomInput[] | MessageCreateWithoutRoomInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateWithoutRoomInput {
  id?: Maybe<ID_Input>;
  text: String;
  from: UserCreateOneInput;
  to: UserCreateOneInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickname: String;
  dateOfBirth: Int;
  userId: String;
  password?: Maybe<String>;
  gender: String;
  bio?: Maybe<String>;
  talks?: Maybe<TalkCreateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentCreateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  repplies?: Maybe<RepplyCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionCreateManyWithoutUserInput>;
  useTermsPrivacyagreement: Boolean;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface RepplyCreateManyWithoutUserInput {
  create?: Maybe<RepplyCreateWithoutUserInput[] | RepplyCreateWithoutUserInput>;
  connect?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
}

export interface RepplyCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  text: String;
  comment: CommentCreateOneWithoutRepplyInput;
  post: PostCreateOneWithoutReppliesInput;
}

export interface CommentCreateOneWithoutRepplyInput {
  create?: Maybe<CommentCreateWithoutRepplyInput>;
  connect?: Maybe<CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutRepplyInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
  post?: Maybe<PostCreateOneWithoutCommentsInput>;
}

export interface PostCreateOneWithoutReppliesInput {
  create?: Maybe<PostCreateWithoutReppliesInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutReppliesInput {
  id?: Maybe<ID_Input>;
  title: String;
  caption: String;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  isLiked?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  commentCounts?: Maybe<Int>;
  postPrivate: Boolean;
  repplyCounts?: Maybe<Int>;
  assortment: String;
}

export interface CommentCreateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutPostInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
  repply?: Maybe<RepplyCreateManyWithoutCommentInput>;
}

export interface RepplyCreateManyWithoutCommentInput {
  create?: Maybe<
    RepplyCreateWithoutCommentInput[] | RepplyCreateWithoutCommentInput
  >;
  connect?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
}

export interface RepplyCreateWithoutCommentInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutReppliesInput>;
  post: PostCreateOneWithoutReppliesInput;
}

export interface SuggestionCreateManyWithoutUserInput {
  create?: Maybe<
    SuggestionCreateWithoutUserInput[] | SuggestionCreateWithoutUserInput
  >;
  connect?: Maybe<SuggestionWhereUniqueInput[] | SuggestionWhereUniqueInput>;
}

export interface SuggestionCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  text: String;
  image?: Maybe<String>;
}

export interface TalkCreateOneWithoutTalkReppliesInput {
  create?: Maybe<TalkCreateWithoutTalkReppliesInput>;
  connect?: Maybe<TalkWhereUniqueInput>;
}

export interface TalkCreateWithoutTalkReppliesInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutTalksInput;
  talkComments?: Maybe<TalkCommentCreateManyWithoutTalkInput>;
  talkCommentCounts?: Maybe<Int>;
  talkRepplyCounts?: Maybe<Int>;
  talkText: String;
  division: String;
}

export interface TalkRepplyCreateManyWithoutTalkInput {
  create?: Maybe<
    TalkRepplyCreateWithoutTalkInput[] | TalkRepplyCreateWithoutTalkInput
  >;
  connect?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
}

export interface TalkRepplyCreateWithoutTalkInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutTalkReppliesInput>;
  talkComment: TalkCommentCreateOneWithoutTalkReppliesInput;
  text: String;
}

export interface CommentUpdateInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
  post?: Maybe<PostUpdateOneWithoutCommentsInput>;
  repply?: Maybe<RepplyUpdateManyWithoutCommentInput>;
}

export interface UserUpdateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  talks?: Maybe<TalkUpdateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentUpdateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionUpdateManyWithoutUserInput>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface TalkUpdateManyWithoutUserInput {
  create?: Maybe<TalkCreateWithoutUserInput[] | TalkCreateWithoutUserInput>;
  delete?: Maybe<TalkWhereUniqueInput[] | TalkWhereUniqueInput>;
  connect?: Maybe<TalkWhereUniqueInput[] | TalkWhereUniqueInput>;
  set?: Maybe<TalkWhereUniqueInput[] | TalkWhereUniqueInput>;
  disconnect?: Maybe<TalkWhereUniqueInput[] | TalkWhereUniqueInput>;
  update?: Maybe<
    | TalkUpdateWithWhereUniqueWithoutUserInput[]
    | TalkUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | TalkUpsertWithWhereUniqueWithoutUserInput[]
    | TalkUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<TalkScalarWhereInput[] | TalkScalarWhereInput>;
  updateMany?: Maybe<
    TalkUpdateManyWithWhereNestedInput[] | TalkUpdateManyWithWhereNestedInput
  >;
}

export interface TalkUpdateWithWhereUniqueWithoutUserInput {
  where: TalkWhereUniqueInput;
  data: TalkUpdateWithoutUserDataInput;
}

export interface TalkUpdateWithoutUserDataInput {
  talkComments?: Maybe<TalkCommentUpdateManyWithoutTalkInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutTalkInput>;
  talkCommentCounts?: Maybe<Int>;
  talkRepplyCounts?: Maybe<Int>;
  talkText?: Maybe<String>;
  division?: Maybe<String>;
}

export interface TalkCommentUpdateManyWithoutTalkInput {
  create?: Maybe<
    TalkCommentCreateWithoutTalkInput[] | TalkCommentCreateWithoutTalkInput
  >;
  delete?: Maybe<TalkCommentWhereUniqueInput[] | TalkCommentWhereUniqueInput>;
  connect?: Maybe<TalkCommentWhereUniqueInput[] | TalkCommentWhereUniqueInput>;
  set?: Maybe<TalkCommentWhereUniqueInput[] | TalkCommentWhereUniqueInput>;
  disconnect?: Maybe<
    TalkCommentWhereUniqueInput[] | TalkCommentWhereUniqueInput
  >;
  update?: Maybe<
    | TalkCommentUpdateWithWhereUniqueWithoutTalkInput[]
    | TalkCommentUpdateWithWhereUniqueWithoutTalkInput
  >;
  upsert?: Maybe<
    | TalkCommentUpsertWithWhereUniqueWithoutTalkInput[]
    | TalkCommentUpsertWithWhereUniqueWithoutTalkInput
  >;
  deleteMany?: Maybe<
    TalkCommentScalarWhereInput[] | TalkCommentScalarWhereInput
  >;
  updateMany?: Maybe<
    | TalkCommentUpdateManyWithWhereNestedInput[]
    | TalkCommentUpdateManyWithWhereNestedInput
  >;
}

export interface TalkCommentUpdateWithWhereUniqueWithoutTalkInput {
  where: TalkCommentWhereUniqueInput;
  data: TalkCommentUpdateWithoutTalkDataInput;
}

export interface TalkCommentUpdateWithoutTalkDataInput {
  user?: Maybe<UserUpdateOneWithoutTalkCommentsInput>;
  text?: Maybe<String>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutTalkCommentInput>;
}

export interface UserUpdateOneWithoutTalkCommentsInput {
  create?: Maybe<UserCreateWithoutTalkCommentsInput>;
  update?: Maybe<UserUpdateWithoutTalkCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutTalkCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutTalkCommentsDataInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  talks?: Maybe<TalkUpdateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionUpdateManyWithoutUserInput>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface TalkRepplyUpdateManyWithoutUserInput {
  create?: Maybe<
    TalkRepplyCreateWithoutUserInput[] | TalkRepplyCreateWithoutUserInput
  >;
  delete?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
  connect?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
  set?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
  disconnect?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
  update?: Maybe<
    | TalkRepplyUpdateWithWhereUniqueWithoutUserInput[]
    | TalkRepplyUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | TalkRepplyUpsertWithWhereUniqueWithoutUserInput[]
    | TalkRepplyUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<TalkRepplyScalarWhereInput[] | TalkRepplyScalarWhereInput>;
  updateMany?: Maybe<
    | TalkRepplyUpdateManyWithWhereNestedInput[]
    | TalkRepplyUpdateManyWithWhereNestedInput
  >;
}

export interface TalkRepplyUpdateWithWhereUniqueWithoutUserInput {
  where: TalkRepplyWhereUniqueInput;
  data: TalkRepplyUpdateWithoutUserDataInput;
}

export interface TalkRepplyUpdateWithoutUserDataInput {
  talkComment?: Maybe<TalkCommentUpdateOneRequiredWithoutTalkReppliesInput>;
  talk?: Maybe<TalkUpdateOneRequiredWithoutTalkReppliesInput>;
  text?: Maybe<String>;
}

export interface TalkCommentUpdateOneRequiredWithoutTalkReppliesInput {
  create?: Maybe<TalkCommentCreateWithoutTalkReppliesInput>;
  update?: Maybe<TalkCommentUpdateWithoutTalkReppliesDataInput>;
  upsert?: Maybe<TalkCommentUpsertWithoutTalkReppliesInput>;
  connect?: Maybe<TalkCommentWhereUniqueInput>;
}

export interface TalkCommentUpdateWithoutTalkReppliesDataInput {
  user?: Maybe<UserUpdateOneWithoutTalkCommentsInput>;
  talk?: Maybe<TalkUpdateOneRequiredWithoutTalkCommentsInput>;
  text?: Maybe<String>;
}

export interface TalkUpdateOneRequiredWithoutTalkCommentsInput {
  create?: Maybe<TalkCreateWithoutTalkCommentsInput>;
  update?: Maybe<TalkUpdateWithoutTalkCommentsDataInput>;
  upsert?: Maybe<TalkUpsertWithoutTalkCommentsInput>;
  connect?: Maybe<TalkWhereUniqueInput>;
}

export interface TalkUpdateWithoutTalkCommentsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutTalksInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutTalkInput>;
  talkCommentCounts?: Maybe<Int>;
  talkRepplyCounts?: Maybe<Int>;
  talkText?: Maybe<String>;
  division?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutTalksInput {
  create?: Maybe<UserCreateWithoutTalksInput>;
  update?: Maybe<UserUpdateWithoutTalksDataInput>;
  upsert?: Maybe<UserUpsertWithoutTalksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutTalksDataInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  talkComments?: Maybe<TalkCommentUpdateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionUpdateManyWithoutUserInput>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface TalkCommentUpdateManyWithoutUserInput {
  create?: Maybe<
    TalkCommentCreateWithoutUserInput[] | TalkCommentCreateWithoutUserInput
  >;
  delete?: Maybe<TalkCommentWhereUniqueInput[] | TalkCommentWhereUniqueInput>;
  connect?: Maybe<TalkCommentWhereUniqueInput[] | TalkCommentWhereUniqueInput>;
  set?: Maybe<TalkCommentWhereUniqueInput[] | TalkCommentWhereUniqueInput>;
  disconnect?: Maybe<
    TalkCommentWhereUniqueInput[] | TalkCommentWhereUniqueInput
  >;
  update?: Maybe<
    | TalkCommentUpdateWithWhereUniqueWithoutUserInput[]
    | TalkCommentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | TalkCommentUpsertWithWhereUniqueWithoutUserInput[]
    | TalkCommentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    TalkCommentScalarWhereInput[] | TalkCommentScalarWhereInput
  >;
  updateMany?: Maybe<
    | TalkCommentUpdateManyWithWhereNestedInput[]
    | TalkCommentUpdateManyWithWhereNestedInput
  >;
}

export interface TalkCommentUpdateWithWhereUniqueWithoutUserInput {
  where: TalkCommentWhereUniqueInput;
  data: TalkCommentUpdateWithoutUserDataInput;
}

export interface TalkCommentUpdateWithoutUserDataInput {
  talk?: Maybe<TalkUpdateOneRequiredWithoutTalkCommentsInput>;
  text?: Maybe<String>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutTalkCommentInput>;
}

export interface TalkRepplyUpdateManyWithoutTalkCommentInput {
  create?: Maybe<
    | TalkRepplyCreateWithoutTalkCommentInput[]
    | TalkRepplyCreateWithoutTalkCommentInput
  >;
  delete?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
  connect?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
  set?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
  disconnect?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
  update?: Maybe<
    | TalkRepplyUpdateWithWhereUniqueWithoutTalkCommentInput[]
    | TalkRepplyUpdateWithWhereUniqueWithoutTalkCommentInput
  >;
  upsert?: Maybe<
    | TalkRepplyUpsertWithWhereUniqueWithoutTalkCommentInput[]
    | TalkRepplyUpsertWithWhereUniqueWithoutTalkCommentInput
  >;
  deleteMany?: Maybe<TalkRepplyScalarWhereInput[] | TalkRepplyScalarWhereInput>;
  updateMany?: Maybe<
    | TalkRepplyUpdateManyWithWhereNestedInput[]
    | TalkRepplyUpdateManyWithWhereNestedInput
  >;
}

export interface TalkRepplyUpdateWithWhereUniqueWithoutTalkCommentInput {
  where: TalkRepplyWhereUniqueInput;
  data: TalkRepplyUpdateWithoutTalkCommentDataInput;
}

export interface TalkRepplyUpdateWithoutTalkCommentDataInput {
  user?: Maybe<UserUpdateOneWithoutTalkReppliesInput>;
  talk?: Maybe<TalkUpdateOneRequiredWithoutTalkReppliesInput>;
  text?: Maybe<String>;
}

export interface UserUpdateOneWithoutTalkReppliesInput {
  create?: Maybe<UserCreateWithoutTalkReppliesInput>;
  update?: Maybe<UserUpdateWithoutTalkReppliesDataInput>;
  upsert?: Maybe<UserUpsertWithoutTalkReppliesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutTalkReppliesDataInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  talks?: Maybe<TalkUpdateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionUpdateManyWithoutUserInput>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface UserUpdateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export interface UserUpdateWithoutFollowersDataInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  talks?: Maybe<TalkUpdateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentUpdateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionUpdateManyWithoutUserInput>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface PostUpdateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutUserInput[]
    | PostUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutUserInput[]
    | PostUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutUserDataInput;
}

export interface PostUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  isLiked?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutPostInput>;
  commentCounts?: Maybe<Int>;
  postPrivate?: Maybe<Boolean>;
  repplyCounts?: Maybe<Int>;
  assortment?: Maybe<String>;
}

export interface FileUpdateManyWithoutPostInput {
  create?: Maybe<FileCreateWithoutPostInput[] | FileCreateWithoutPostInput>;
  delete?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  connect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  set?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  disconnect?: Maybe<FileWhereUniqueInput[] | FileWhereUniqueInput>;
  update?: Maybe<
    | FileUpdateWithWhereUniqueWithoutPostInput[]
    | FileUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | FileUpsertWithWhereUniqueWithoutPostInput[]
    | FileUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  updateMany?: Maybe<
    FileUpdateManyWithWhereNestedInput[] | FileUpdateManyWithWhereNestedInput
  >;
}

export interface FileUpdateWithWhereUniqueWithoutPostInput {
  where: FileWhereUniqueInput;
  data: FileUpdateWithoutPostDataInput;
}

export interface FileUpdateWithoutPostDataInput {
  url?: Maybe<String>;
  postRatio?: Maybe<Float>;
}

export interface FileUpsertWithWhereUniqueWithoutPostInput {
  where: FileWhereUniqueInput;
  update: FileUpdateWithoutPostDataInput;
  create: FileCreateWithoutPostInput;
}

export interface FileScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  postRatio?: Maybe<Float>;
  postRatio_not?: Maybe<Float>;
  postRatio_in?: Maybe<Float[] | Float>;
  postRatio_not_in?: Maybe<Float[] | Float>;
  postRatio_lt?: Maybe<Float>;
  postRatio_lte?: Maybe<Float>;
  postRatio_gt?: Maybe<Float>;
  postRatio_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  OR?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
  NOT?: Maybe<FileScalarWhereInput[] | FileScalarWhereInput>;
}

export interface FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput;
  data: FileUpdateManyDataInput;
}

export interface FileUpdateManyDataInput {
  url?: Maybe<String>;
  postRatio?: Maybe<Float>;
}

export interface LikeUpdateManyWithoutPostInput {
  create?: Maybe<LikeCreateWithoutPostInput[] | LikeCreateWithoutPostInput>;
  delete?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  set?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  disconnect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  update?: Maybe<
    | LikeUpdateWithWhereUniqueWithoutPostInput[]
    | LikeUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | LikeUpsertWithWhereUniqueWithoutPostInput[]
    | LikeUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface LikeUpdateWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutPostDataInput;
}

export interface LikeUpdateWithoutPostDataInput {
  user?: Maybe<UserUpdateOneWithoutLikesInput>;
}

export interface UserUpdateOneWithoutLikesInput {
  create?: Maybe<UserCreateWithoutLikesInput>;
  update?: Maybe<UserUpdateWithoutLikesDataInput>;
  upsert?: Maybe<UserUpsertWithoutLikesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutLikesDataInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  talks?: Maybe<TalkUpdateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentUpdateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionUpdateManyWithoutUserInput>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface UserUpdateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingDataInput;
}

export interface UserUpdateWithoutFollowingDataInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  talks?: Maybe<TalkUpdateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentUpdateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutUserInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionUpdateManyWithoutUserInput>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface LikeUpdateManyWithoutUserInput {
  create?: Maybe<LikeCreateWithoutUserInput[] | LikeCreateWithoutUserInput>;
  delete?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  set?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  disconnect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  update?: Maybe<
    | LikeUpdateWithWhereUniqueWithoutUserInput[]
    | LikeUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | LikeUpsertWithWhereUniqueWithoutUserInput[]
    | LikeUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateWithoutUserDataInput;
}

export interface LikeUpdateWithoutUserDataInput {
  post?: Maybe<PostUpdateOneWithoutLikesInput>;
}

export interface PostUpdateOneWithoutLikesInput {
  create?: Maybe<PostCreateWithoutLikesInput>;
  update?: Maybe<PostUpdateWithoutLikesDataInput>;
  upsert?: Maybe<PostUpsertWithoutLikesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutLikesDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  isLiked?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutPostInput>;
  commentCounts?: Maybe<Int>;
  postPrivate?: Maybe<Boolean>;
  repplyCounts?: Maybe<Int>;
  assortment?: Maybe<String>;
}

export interface UserUpdateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  talks?: Maybe<TalkUpdateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentUpdateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionUpdateManyWithoutUserInput>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface CommentUpdateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutUserInput[]
    | CommentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutUserInput[]
    | CommentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutUserDataInput;
}

export interface CommentUpdateWithoutUserDataInput {
  text?: Maybe<String>;
  post?: Maybe<PostUpdateOneWithoutCommentsInput>;
  repply?: Maybe<RepplyUpdateManyWithoutCommentInput>;
}

export interface PostUpdateOneWithoutCommentsInput {
  create?: Maybe<PostCreateWithoutCommentsInput>;
  update?: Maybe<PostUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<PostUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutCommentsDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  isLiked?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  repplies?: Maybe<RepplyUpdateManyWithoutPostInput>;
  commentCounts?: Maybe<Int>;
  postPrivate?: Maybe<Boolean>;
  repplyCounts?: Maybe<Int>;
  assortment?: Maybe<String>;
}

export interface RepplyUpdateManyWithoutPostInput {
  create?: Maybe<RepplyCreateWithoutPostInput[] | RepplyCreateWithoutPostInput>;
  delete?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
  connect?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
  set?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
  disconnect?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
  update?: Maybe<
    | RepplyUpdateWithWhereUniqueWithoutPostInput[]
    | RepplyUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | RepplyUpsertWithWhereUniqueWithoutPostInput[]
    | RepplyUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<RepplyScalarWhereInput[] | RepplyScalarWhereInput>;
  updateMany?: Maybe<
    | RepplyUpdateManyWithWhereNestedInput[]
    | RepplyUpdateManyWithWhereNestedInput
  >;
}

export interface RepplyUpdateWithWhereUniqueWithoutPostInput {
  where: RepplyWhereUniqueInput;
  data: RepplyUpdateWithoutPostDataInput;
}

export interface RepplyUpdateWithoutPostDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutReppliesInput>;
  comment?: Maybe<CommentUpdateOneRequiredWithoutRepplyInput>;
}

export interface UserUpdateOneWithoutReppliesInput {
  create?: Maybe<UserCreateWithoutReppliesInput>;
  update?: Maybe<UserUpdateWithoutReppliesDataInput>;
  upsert?: Maybe<UserUpsertWithoutReppliesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutReppliesDataInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  talks?: Maybe<TalkUpdateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentUpdateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionUpdateManyWithoutUserInput>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface RoomUpdateManyWithoutParticipantsInput {
  create?: Maybe<
    RoomCreateWithoutParticipantsInput[] | RoomCreateWithoutParticipantsInput
  >;
  delete?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  connect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  set?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  disconnect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  update?: Maybe<
    | RoomUpdateWithWhereUniqueWithoutParticipantsInput[]
    | RoomUpdateWithWhereUniqueWithoutParticipantsInput
  >;
  upsert?: Maybe<
    | RoomUpsertWithWhereUniqueWithoutParticipantsInput[]
    | RoomUpsertWithWhereUniqueWithoutParticipantsInput
  >;
  deleteMany?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
}

export interface RoomUpdateWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput;
  data: RoomUpdateWithoutParticipantsDataInput;
}

export interface RoomUpdateWithoutParticipantsDataInput {
  messages?: Maybe<MessageUpdateManyWithoutRoomInput>;
}

export interface MessageUpdateManyWithoutRoomInput {
  create?: Maybe<
    MessageCreateWithoutRoomInput[] | MessageCreateWithoutRoomInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutRoomInput[]
    | MessageUpdateWithWhereUniqueWithoutRoomInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutRoomInput[]
    | MessageUpsertWithWhereUniqueWithoutRoomInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutRoomDataInput;
}

export interface MessageUpdateWithoutRoomDataInput {
  text?: Maybe<String>;
  from?: Maybe<UserUpdateOneRequiredInput>;
  to?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  talks?: Maybe<TalkUpdateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentUpdateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionUpdateManyWithoutUserInput>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface RepplyUpdateManyWithoutUserInput {
  create?: Maybe<RepplyCreateWithoutUserInput[] | RepplyCreateWithoutUserInput>;
  delete?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
  connect?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
  set?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
  disconnect?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
  update?: Maybe<
    | RepplyUpdateWithWhereUniqueWithoutUserInput[]
    | RepplyUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | RepplyUpsertWithWhereUniqueWithoutUserInput[]
    | RepplyUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<RepplyScalarWhereInput[] | RepplyScalarWhereInput>;
  updateMany?: Maybe<
    | RepplyUpdateManyWithWhereNestedInput[]
    | RepplyUpdateManyWithWhereNestedInput
  >;
}

export interface RepplyUpdateWithWhereUniqueWithoutUserInput {
  where: RepplyWhereUniqueInput;
  data: RepplyUpdateWithoutUserDataInput;
}

export interface RepplyUpdateWithoutUserDataInput {
  text?: Maybe<String>;
  comment?: Maybe<CommentUpdateOneRequiredWithoutRepplyInput>;
  post?: Maybe<PostUpdateOneRequiredWithoutReppliesInput>;
}

export interface CommentUpdateOneRequiredWithoutRepplyInput {
  create?: Maybe<CommentCreateWithoutRepplyInput>;
  update?: Maybe<CommentUpdateWithoutRepplyDataInput>;
  upsert?: Maybe<CommentUpsertWithoutRepplyInput>;
  connect?: Maybe<CommentWhereUniqueInput>;
}

export interface CommentUpdateWithoutRepplyDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
  post?: Maybe<PostUpdateOneWithoutCommentsInput>;
}

export interface CommentUpsertWithoutRepplyInput {
  update: CommentUpdateWithoutRepplyDataInput;
  create: CommentCreateWithoutRepplyInput;
}

export interface PostUpdateOneRequiredWithoutReppliesInput {
  create?: Maybe<PostCreateWithoutReppliesInput>;
  update?: Maybe<PostUpdateWithoutReppliesDataInput>;
  upsert?: Maybe<PostUpsertWithoutReppliesInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutReppliesDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  isLiked?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  commentCounts?: Maybe<Int>;
  postPrivate?: Maybe<Boolean>;
  repplyCounts?: Maybe<Int>;
  assortment?: Maybe<String>;
}

export interface CommentUpdateManyWithoutPostInput {
  create?: Maybe<
    CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutPostInput[]
    | CommentUpdateWithWhereUniqueWithoutPostInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutPostInput[]
    | CommentUpsertWithWhereUniqueWithoutPostInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutPostDataInput;
}

export interface CommentUpdateWithoutPostDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
  repply?: Maybe<RepplyUpdateManyWithoutCommentInput>;
}

export interface RepplyUpdateManyWithoutCommentInput {
  create?: Maybe<
    RepplyCreateWithoutCommentInput[] | RepplyCreateWithoutCommentInput
  >;
  delete?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
  connect?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
  set?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
  disconnect?: Maybe<RepplyWhereUniqueInput[] | RepplyWhereUniqueInput>;
  update?: Maybe<
    | RepplyUpdateWithWhereUniqueWithoutCommentInput[]
    | RepplyUpdateWithWhereUniqueWithoutCommentInput
  >;
  upsert?: Maybe<
    | RepplyUpsertWithWhereUniqueWithoutCommentInput[]
    | RepplyUpsertWithWhereUniqueWithoutCommentInput
  >;
  deleteMany?: Maybe<RepplyScalarWhereInput[] | RepplyScalarWhereInput>;
  updateMany?: Maybe<
    | RepplyUpdateManyWithWhereNestedInput[]
    | RepplyUpdateManyWithWhereNestedInput
  >;
}

export interface RepplyUpdateWithWhereUniqueWithoutCommentInput {
  where: RepplyWhereUniqueInput;
  data: RepplyUpdateWithoutCommentDataInput;
}

export interface RepplyUpdateWithoutCommentDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutReppliesInput>;
  post?: Maybe<PostUpdateOneRequiredWithoutReppliesInput>;
}

export interface RepplyUpsertWithWhereUniqueWithoutCommentInput {
  where: RepplyWhereUniqueInput;
  update: RepplyUpdateWithoutCommentDataInput;
  create: RepplyCreateWithoutCommentInput;
}

export interface RepplyScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RepplyScalarWhereInput[] | RepplyScalarWhereInput>;
  OR?: Maybe<RepplyScalarWhereInput[] | RepplyScalarWhereInput>;
  NOT?: Maybe<RepplyScalarWhereInput[] | RepplyScalarWhereInput>;
}

export interface RepplyUpdateManyWithWhereNestedInput {
  where: RepplyScalarWhereInput;
  data: RepplyUpdateManyDataInput;
}

export interface RepplyUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutPostDataInput;
  create: CommentCreateWithoutPostInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface PostUpsertWithoutReppliesInput {
  update: PostUpdateWithoutReppliesDataInput;
  create: PostCreateWithoutReppliesInput;
}

export interface RepplyUpsertWithWhereUniqueWithoutUserInput {
  where: RepplyWhereUniqueInput;
  update: RepplyUpdateWithoutUserDataInput;
  create: RepplyCreateWithoutUserInput;
}

export interface SuggestionUpdateManyWithoutUserInput {
  create?: Maybe<
    SuggestionCreateWithoutUserInput[] | SuggestionCreateWithoutUserInput
  >;
  delete?: Maybe<SuggestionWhereUniqueInput[] | SuggestionWhereUniqueInput>;
  connect?: Maybe<SuggestionWhereUniqueInput[] | SuggestionWhereUniqueInput>;
  set?: Maybe<SuggestionWhereUniqueInput[] | SuggestionWhereUniqueInput>;
  disconnect?: Maybe<SuggestionWhereUniqueInput[] | SuggestionWhereUniqueInput>;
  update?: Maybe<
    | SuggestionUpdateWithWhereUniqueWithoutUserInput[]
    | SuggestionUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | SuggestionUpsertWithWhereUniqueWithoutUserInput[]
    | SuggestionUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<SuggestionScalarWhereInput[] | SuggestionScalarWhereInput>;
  updateMany?: Maybe<
    | SuggestionUpdateManyWithWhereNestedInput[]
    | SuggestionUpdateManyWithWhereNestedInput
  >;
}

export interface SuggestionUpdateWithWhereUniqueWithoutUserInput {
  where: SuggestionWhereUniqueInput;
  data: SuggestionUpdateWithoutUserDataInput;
}

export interface SuggestionUpdateWithoutUserDataInput {
  text?: Maybe<String>;
  image?: Maybe<String>;
}

export interface SuggestionUpsertWithWhereUniqueWithoutUserInput {
  where: SuggestionWhereUniqueInput;
  update: SuggestionUpdateWithoutUserDataInput;
  create: SuggestionCreateWithoutUserInput;
}

export interface SuggestionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SuggestionScalarWhereInput[] | SuggestionScalarWhereInput>;
  OR?: Maybe<SuggestionScalarWhereInput[] | SuggestionScalarWhereInput>;
  NOT?: Maybe<SuggestionScalarWhereInput[] | SuggestionScalarWhereInput>;
}

export interface SuggestionUpdateManyWithWhereNestedInput {
  where: SuggestionScalarWhereInput;
  data: SuggestionUpdateManyDataInput;
}

export interface SuggestionUpdateManyDataInput {
  text?: Maybe<String>;
  image?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface MessageUpsertWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutRoomDataInput;
  create: MessageCreateWithoutRoomInput;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface RoomUpsertWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput;
  update: RoomUpdateWithoutParticipantsDataInput;
  create: RoomCreateWithoutParticipantsInput;
}

export interface RoomScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  OR?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  NOT?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
}

export interface UserUpsertWithoutReppliesInput {
  update: UserUpdateWithoutReppliesDataInput;
  create: UserCreateWithoutReppliesInput;
}

export interface RepplyUpsertWithWhereUniqueWithoutPostInput {
  where: RepplyWhereUniqueInput;
  update: RepplyUpdateWithoutPostDataInput;
  create: RepplyCreateWithoutPostInput;
}

export interface PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsDataInput;
  create: PostCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutUserDataInput;
  create: CommentCreateWithoutUserInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpsertWithoutLikesInput {
  update: PostUpdateWithoutLikesDataInput;
  create: PostCreateWithoutLikesInput;
}

export interface LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutUserDataInput;
  create: LikeCreateWithoutUserInput;
}

export interface LikeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  OR?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  NOT?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingDataInput;
  create: UserCreateWithoutFollowingInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  dateOfBirth_not?: Maybe<Int>;
  dateOfBirth_in?: Maybe<Int[] | Int>;
  dateOfBirth_not_in?: Maybe<Int[] | Int>;
  dateOfBirth_lt?: Maybe<Int>;
  dateOfBirth_lte?: Maybe<Int>;
  dateOfBirth_gt?: Maybe<Int>;
  dateOfBirth_gte?: Maybe<Int>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  isFollowing?: Maybe<Boolean>;
  isFollowing_not?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  isSelf_not?: Maybe<Boolean>;
  postCounts?: Maybe<Int>;
  postCounts_not?: Maybe<Int>;
  postCounts_in?: Maybe<Int[] | Int>;
  postCounts_not_in?: Maybe<Int[] | Int>;
  postCounts_lt?: Maybe<Int>;
  postCounts_lte?: Maybe<Int>;
  postCounts_gt?: Maybe<Int>;
  postCounts_gte?: Maybe<Int>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  useTermsPrivacyagreement_not?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  snsLogin_not?: Maybe<String>;
  snsLogin_in?: Maybe<String[] | String>;
  snsLogin_not_in?: Maybe<String[] | String>;
  snsLogin_lt?: Maybe<String>;
  snsLogin_lte?: Maybe<String>;
  snsLogin_gt?: Maybe<String>;
  snsLogin_gte?: Maybe<String>;
  snsLogin_contains?: Maybe<String>;
  snsLogin_not_contains?: Maybe<String>;
  snsLogin_starts_with?: Maybe<String>;
  snsLogin_not_starts_with?: Maybe<String>;
  snsLogin_ends_with?: Maybe<String>;
  snsLogin_not_ends_with?: Maybe<String>;
  loginSecret?: Maybe<String>;
  loginSecret_not?: Maybe<String>;
  loginSecret_in?: Maybe<String[] | String>;
  loginSecret_not_in?: Maybe<String[] | String>;
  loginSecret_lt?: Maybe<String>;
  loginSecret_lte?: Maybe<String>;
  loginSecret_gt?: Maybe<String>;
  loginSecret_gte?: Maybe<String>;
  loginSecret_contains?: Maybe<String>;
  loginSecret_not_contains?: Maybe<String>;
  loginSecret_starts_with?: Maybe<String>;
  loginSecret_not_starts_with?: Maybe<String>;
  loginSecret_ends_with?: Maybe<String>;
  loginSecret_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  postCounts?: Maybe<Int>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput;
  create: UserCreateWithoutLikesInput;
}

export interface LikeUpsertWithWhereUniqueWithoutPostInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateWithoutPostDataInput;
  create: LikeCreateWithoutPostInput;
}

export interface PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutUserDataInput;
  create: PostCreateWithoutUserInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  isLiked?: Maybe<Boolean>;
  isLiked_not?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  likeCount_not?: Maybe<Int>;
  likeCount_in?: Maybe<Int[] | Int>;
  likeCount_not_in?: Maybe<Int[] | Int>;
  likeCount_lt?: Maybe<Int>;
  likeCount_lte?: Maybe<Int>;
  likeCount_gt?: Maybe<Int>;
  likeCount_gte?: Maybe<Int>;
  commentCounts?: Maybe<Int>;
  commentCounts_not?: Maybe<Int>;
  commentCounts_in?: Maybe<Int[] | Int>;
  commentCounts_not_in?: Maybe<Int[] | Int>;
  commentCounts_lt?: Maybe<Int>;
  commentCounts_lte?: Maybe<Int>;
  commentCounts_gt?: Maybe<Int>;
  commentCounts_gte?: Maybe<Int>;
  postPrivate?: Maybe<Boolean>;
  postPrivate_not?: Maybe<Boolean>;
  repplyCounts?: Maybe<Int>;
  repplyCounts_not?: Maybe<Int>;
  repplyCounts_in?: Maybe<Int[] | Int>;
  repplyCounts_not_in?: Maybe<Int[] | Int>;
  repplyCounts_lt?: Maybe<Int>;
  repplyCounts_lte?: Maybe<Int>;
  repplyCounts_gt?: Maybe<Int>;
  repplyCounts_gte?: Maybe<Int>;
  assortment?: Maybe<String>;
  assortment_not?: Maybe<String>;
  assortment_in?: Maybe<String[] | String>;
  assortment_not_in?: Maybe<String[] | String>;
  assortment_lt?: Maybe<String>;
  assortment_lte?: Maybe<String>;
  assortment_gt?: Maybe<String>;
  assortment_gte?: Maybe<String>;
  assortment_contains?: Maybe<String>;
  assortment_not_contains?: Maybe<String>;
  assortment_starts_with?: Maybe<String>;
  assortment_not_starts_with?: Maybe<String>;
  assortment_ends_with?: Maybe<String>;
  assortment_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  isLiked?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  commentCounts?: Maybe<Int>;
  postPrivate?: Maybe<Boolean>;
  repplyCounts?: Maybe<Int>;
  assortment?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface UserUpsertWithoutTalkReppliesInput {
  update: UserUpdateWithoutTalkReppliesDataInput;
  create: UserCreateWithoutTalkReppliesInput;
}

export interface TalkUpdateOneRequiredWithoutTalkReppliesInput {
  create?: Maybe<TalkCreateWithoutTalkReppliesInput>;
  update?: Maybe<TalkUpdateWithoutTalkReppliesDataInput>;
  upsert?: Maybe<TalkUpsertWithoutTalkReppliesInput>;
  connect?: Maybe<TalkWhereUniqueInput>;
}

export interface TalkUpdateWithoutTalkReppliesDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutTalksInput>;
  talkComments?: Maybe<TalkCommentUpdateManyWithoutTalkInput>;
  talkCommentCounts?: Maybe<Int>;
  talkRepplyCounts?: Maybe<Int>;
  talkText?: Maybe<String>;
  division?: Maybe<String>;
}

export interface TalkUpsertWithoutTalkReppliesInput {
  update: TalkUpdateWithoutTalkReppliesDataInput;
  create: TalkCreateWithoutTalkReppliesInput;
}

export interface TalkRepplyUpsertWithWhereUniqueWithoutTalkCommentInput {
  where: TalkRepplyWhereUniqueInput;
  update: TalkRepplyUpdateWithoutTalkCommentDataInput;
  create: TalkRepplyCreateWithoutTalkCommentInput;
}

export interface TalkRepplyScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TalkRepplyScalarWhereInput[] | TalkRepplyScalarWhereInput>;
  OR?: Maybe<TalkRepplyScalarWhereInput[] | TalkRepplyScalarWhereInput>;
  NOT?: Maybe<TalkRepplyScalarWhereInput[] | TalkRepplyScalarWhereInput>;
}

export interface TalkRepplyUpdateManyWithWhereNestedInput {
  where: TalkRepplyScalarWhereInput;
  data: TalkRepplyUpdateManyDataInput;
}

export interface TalkRepplyUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface TalkCommentUpsertWithWhereUniqueWithoutUserInput {
  where: TalkCommentWhereUniqueInput;
  update: TalkCommentUpdateWithoutUserDataInput;
  create: TalkCommentCreateWithoutUserInput;
}

export interface TalkCommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TalkCommentScalarWhereInput[] | TalkCommentScalarWhereInput>;
  OR?: Maybe<TalkCommentScalarWhereInput[] | TalkCommentScalarWhereInput>;
  NOT?: Maybe<TalkCommentScalarWhereInput[] | TalkCommentScalarWhereInput>;
}

export interface TalkCommentUpdateManyWithWhereNestedInput {
  where: TalkCommentScalarWhereInput;
  data: TalkCommentUpdateManyDataInput;
}

export interface TalkCommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface UserUpsertWithoutTalksInput {
  update: UserUpdateWithoutTalksDataInput;
  create: UserCreateWithoutTalksInput;
}

export interface TalkRepplyUpdateManyWithoutTalkInput {
  create?: Maybe<
    TalkRepplyCreateWithoutTalkInput[] | TalkRepplyCreateWithoutTalkInput
  >;
  delete?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
  connect?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
  set?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
  disconnect?: Maybe<TalkRepplyWhereUniqueInput[] | TalkRepplyWhereUniqueInput>;
  update?: Maybe<
    | TalkRepplyUpdateWithWhereUniqueWithoutTalkInput[]
    | TalkRepplyUpdateWithWhereUniqueWithoutTalkInput
  >;
  upsert?: Maybe<
    | TalkRepplyUpsertWithWhereUniqueWithoutTalkInput[]
    | TalkRepplyUpsertWithWhereUniqueWithoutTalkInput
  >;
  deleteMany?: Maybe<TalkRepplyScalarWhereInput[] | TalkRepplyScalarWhereInput>;
  updateMany?: Maybe<
    | TalkRepplyUpdateManyWithWhereNestedInput[]
    | TalkRepplyUpdateManyWithWhereNestedInput
  >;
}

export interface TalkRepplyUpdateWithWhereUniqueWithoutTalkInput {
  where: TalkRepplyWhereUniqueInput;
  data: TalkRepplyUpdateWithoutTalkDataInput;
}

export interface TalkRepplyUpdateWithoutTalkDataInput {
  user?: Maybe<UserUpdateOneWithoutTalkReppliesInput>;
  talkComment?: Maybe<TalkCommentUpdateOneRequiredWithoutTalkReppliesInput>;
  text?: Maybe<String>;
}

export interface TalkRepplyUpsertWithWhereUniqueWithoutTalkInput {
  where: TalkRepplyWhereUniqueInput;
  update: TalkRepplyUpdateWithoutTalkDataInput;
  create: TalkRepplyCreateWithoutTalkInput;
}

export interface TalkUpsertWithoutTalkCommentsInput {
  update: TalkUpdateWithoutTalkCommentsDataInput;
  create: TalkCreateWithoutTalkCommentsInput;
}

export interface TalkCommentUpsertWithoutTalkReppliesInput {
  update: TalkCommentUpdateWithoutTalkReppliesDataInput;
  create: TalkCommentCreateWithoutTalkReppliesInput;
}

export interface TalkRepplyUpsertWithWhereUniqueWithoutUserInput {
  where: TalkRepplyWhereUniqueInput;
  update: TalkRepplyUpdateWithoutUserDataInput;
  create: TalkRepplyCreateWithoutUserInput;
}

export interface UserUpsertWithoutTalkCommentsInput {
  update: UserUpdateWithoutTalkCommentsDataInput;
  create: UserCreateWithoutTalkCommentsInput;
}

export interface TalkCommentUpsertWithWhereUniqueWithoutTalkInput {
  where: TalkCommentWhereUniqueInput;
  update: TalkCommentUpdateWithoutTalkDataInput;
  create: TalkCommentCreateWithoutTalkInput;
}

export interface TalkUpsertWithWhereUniqueWithoutUserInput {
  where: TalkWhereUniqueInput;
  update: TalkUpdateWithoutUserDataInput;
  create: TalkCreateWithoutUserInput;
}

export interface TalkScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  talkCommentCounts?: Maybe<Int>;
  talkCommentCounts_not?: Maybe<Int>;
  talkCommentCounts_in?: Maybe<Int[] | Int>;
  talkCommentCounts_not_in?: Maybe<Int[] | Int>;
  talkCommentCounts_lt?: Maybe<Int>;
  talkCommentCounts_lte?: Maybe<Int>;
  talkCommentCounts_gt?: Maybe<Int>;
  talkCommentCounts_gte?: Maybe<Int>;
  talkRepplyCounts?: Maybe<Int>;
  talkRepplyCounts_not?: Maybe<Int>;
  talkRepplyCounts_in?: Maybe<Int[] | Int>;
  talkRepplyCounts_not_in?: Maybe<Int[] | Int>;
  talkRepplyCounts_lt?: Maybe<Int>;
  talkRepplyCounts_lte?: Maybe<Int>;
  talkRepplyCounts_gt?: Maybe<Int>;
  talkRepplyCounts_gte?: Maybe<Int>;
  talkText?: Maybe<String>;
  talkText_not?: Maybe<String>;
  talkText_in?: Maybe<String[] | String>;
  talkText_not_in?: Maybe<String[] | String>;
  talkText_lt?: Maybe<String>;
  talkText_lte?: Maybe<String>;
  talkText_gt?: Maybe<String>;
  talkText_gte?: Maybe<String>;
  talkText_contains?: Maybe<String>;
  talkText_not_contains?: Maybe<String>;
  talkText_starts_with?: Maybe<String>;
  talkText_not_starts_with?: Maybe<String>;
  talkText_ends_with?: Maybe<String>;
  talkText_not_ends_with?: Maybe<String>;
  division?: Maybe<String>;
  division_not?: Maybe<String>;
  division_in?: Maybe<String[] | String>;
  division_not_in?: Maybe<String[] | String>;
  division_lt?: Maybe<String>;
  division_lte?: Maybe<String>;
  division_gt?: Maybe<String>;
  division_gte?: Maybe<String>;
  division_contains?: Maybe<String>;
  division_not_contains?: Maybe<String>;
  division_starts_with?: Maybe<String>;
  division_not_starts_with?: Maybe<String>;
  division_ends_with?: Maybe<String>;
  division_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TalkScalarWhereInput[] | TalkScalarWhereInput>;
  OR?: Maybe<TalkScalarWhereInput[] | TalkScalarWhereInput>;
  NOT?: Maybe<TalkScalarWhereInput[] | TalkScalarWhereInput>;
}

export interface TalkUpdateManyWithWhereNestedInput {
  where: TalkScalarWhereInput;
  data: TalkUpdateManyDataInput;
}

export interface TalkUpdateManyDataInput {
  talkCommentCounts?: Maybe<Int>;
  talkRepplyCounts?: Maybe<Int>;
  talkText?: Maybe<String>;
  division?: Maybe<String>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface FileCreateInput {
  id?: Maybe<ID_Input>;
  url: String;
  postRatio?: Maybe<Float>;
  post?: Maybe<PostCreateOneWithoutFilesInput>;
}

export interface PostCreateOneWithoutFilesInput {
  create?: Maybe<PostCreateWithoutFilesInput>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostCreateWithoutFilesInput {
  id?: Maybe<ID_Input>;
  title: String;
  caption: String;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  isLiked?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  repplies?: Maybe<RepplyCreateManyWithoutPostInput>;
  commentCounts?: Maybe<Int>;
  postPrivate: Boolean;
  repplyCounts?: Maybe<Int>;
  assortment: String;
}

export interface FileUpdateInput {
  url?: Maybe<String>;
  postRatio?: Maybe<Float>;
  post?: Maybe<PostUpdateOneWithoutFilesInput>;
}

export interface PostUpdateOneWithoutFilesInput {
  create?: Maybe<PostCreateWithoutFilesInput>;
  update?: Maybe<PostUpdateWithoutFilesDataInput>;
  upsert?: Maybe<PostUpsertWithoutFilesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PostWhereUniqueInput>;
}

export interface PostUpdateWithoutFilesDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  isLiked?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutPostInput>;
  commentCounts?: Maybe<Int>;
  postPrivate?: Maybe<Boolean>;
  repplyCounts?: Maybe<Int>;
  assortment?: Maybe<String>;
}

export interface PostUpsertWithoutFilesInput {
  update: PostUpdateWithoutFilesDataInput;
  create: PostCreateWithoutFilesInput;
}

export interface FileUpdateManyMutationInput {
  url?: Maybe<String>;
  postRatio?: Maybe<Float>;
}

export interface LikeCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutLikesInput>;
  post?: Maybe<PostCreateOneWithoutLikesInput>;
}

export interface LikeUpdateInput {
  user?: Maybe<UserUpdateOneWithoutLikesInput>;
  post?: Maybe<PostUpdateOneWithoutLikesInput>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  from: UserCreateOneInput;
  to: UserCreateOneInput;
  room: RoomCreateOneWithoutMessagesInput;
}

export interface RoomCreateOneWithoutMessagesInput {
  create?: Maybe<RoomCreateWithoutMessagesInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  participants?: Maybe<UserCreateManyWithoutRoomsInput>;
}

export interface UserCreateManyWithoutRoomsInput {
  create?: Maybe<UserCreateWithoutRoomsInput[] | UserCreateWithoutRoomsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutRoomsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickname: String;
  dateOfBirth: Int;
  userId: String;
  password?: Maybe<String>;
  gender: String;
  bio?: Maybe<String>;
  talks?: Maybe<TalkCreateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentCreateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  repplies?: Maybe<RepplyCreateManyWithoutUserInput>;
  suggestions?: Maybe<SuggestionCreateManyWithoutUserInput>;
  useTermsPrivacyagreement: Boolean;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface MessageUpdateInput {
  text?: Maybe<String>;
  from?: Maybe<UserUpdateOneRequiredInput>;
  to?: Maybe<UserUpdateOneRequiredInput>;
  room?: Maybe<RoomUpdateOneRequiredWithoutMessagesInput>;
}

export interface RoomUpdateOneRequiredWithoutMessagesInput {
  create?: Maybe<RoomCreateWithoutMessagesInput>;
  update?: Maybe<RoomUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<RoomUpsertWithoutMessagesInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomUpdateWithoutMessagesDataInput {
  participants?: Maybe<UserUpdateManyWithoutRoomsInput>;
}

export interface UserUpdateManyWithoutRoomsInput {
  create?: Maybe<UserCreateWithoutRoomsInput[] | UserCreateWithoutRoomsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutRoomsInput[]
    | UserUpdateWithWhereUniqueWithoutRoomsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutRoomsInput[]
    | UserUpsertWithWhereUniqueWithoutRoomsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutRoomsDataInput;
}

export interface UserUpdateWithoutRoomsDataInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  talks?: Maybe<TalkUpdateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentUpdateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutUserInput>;
  suggestions?: Maybe<SuggestionUpdateManyWithoutUserInput>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutRoomsDataInput;
  create: UserCreateWithoutRoomsInput;
}

export interface RoomUpsertWithoutMessagesInput {
  update: RoomUpdateWithoutMessagesDataInput;
  create: RoomCreateWithoutMessagesInput;
}

export interface MessageUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface NoticeCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  text: String;
}

export interface NoticeUpdateInput {
  title?: Maybe<String>;
  text?: Maybe<String>;
}

export interface NoticeUpdateManyMutationInput {
  title?: Maybe<String>;
  text?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  caption: String;
  user?: Maybe<UserCreateOneWithoutPostsInput>;
  files?: Maybe<FileCreateManyWithoutPostInput>;
  likes?: Maybe<LikeCreateManyWithoutPostInput>;
  isLiked?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  comments?: Maybe<CommentCreateManyWithoutPostInput>;
  repplies?: Maybe<RepplyCreateManyWithoutPostInput>;
  commentCounts?: Maybe<Int>;
  postPrivate: Boolean;
  repplyCounts?: Maybe<Int>;
  assortment: String;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutPostsInput>;
  files?: Maybe<FileUpdateManyWithoutPostInput>;
  likes?: Maybe<LikeUpdateManyWithoutPostInput>;
  isLiked?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  comments?: Maybe<CommentUpdateManyWithoutPostInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutPostInput>;
  commentCounts?: Maybe<Int>;
  postPrivate?: Maybe<Boolean>;
  repplyCounts?: Maybe<Int>;
  assortment?: Maybe<String>;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  isLiked?: Maybe<Boolean>;
  likeCount?: Maybe<Int>;
  commentCounts?: Maybe<Int>;
  postPrivate?: Maybe<Boolean>;
  repplyCounts?: Maybe<Int>;
  assortment?: Maybe<String>;
}

export interface RepplyCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutReppliesInput>;
  comment: CommentCreateOneWithoutRepplyInput;
  post: PostCreateOneWithoutReppliesInput;
}

export interface RepplyUpdateInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutReppliesInput>;
  comment?: Maybe<CommentUpdateOneRequiredWithoutRepplyInput>;
  post?: Maybe<PostUpdateOneRequiredWithoutReppliesInput>;
}

export interface RepplyUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface RoomCreateInput {
  id?: Maybe<ID_Input>;
  participants?: Maybe<UserCreateManyWithoutRoomsInput>;
  messages?: Maybe<MessageCreateManyWithoutRoomInput>;
}

export interface RoomUpdateInput {
  participants?: Maybe<UserUpdateManyWithoutRoomsInput>;
  messages?: Maybe<MessageUpdateManyWithoutRoomInput>;
}

export interface SuggestionCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutSuggestionsInput;
  text: String;
  image?: Maybe<String>;
}

export interface UserCreateOneWithoutSuggestionsInput {
  create?: Maybe<UserCreateWithoutSuggestionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSuggestionsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  nickname: String;
  dateOfBirth: Int;
  userId: String;
  password?: Maybe<String>;
  gender: String;
  bio?: Maybe<String>;
  talks?: Maybe<TalkCreateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentCreateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  repplies?: Maybe<RepplyCreateManyWithoutUserInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  useTermsPrivacyagreement: Boolean;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface SuggestionUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutSuggestionsInput>;
  text?: Maybe<String>;
  image?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutSuggestionsInput {
  create?: Maybe<UserCreateWithoutSuggestionsInput>;
  update?: Maybe<UserUpdateWithoutSuggestionsDataInput>;
  upsert?: Maybe<UserUpsertWithoutSuggestionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSuggestionsDataInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  talks?: Maybe<TalkUpdateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentUpdateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface UserUpsertWithoutSuggestionsInput {
  update: UserUpdateWithoutSuggestionsDataInput;
  create: UserCreateWithoutSuggestionsInput;
}

export interface SuggestionUpdateManyMutationInput {
  text?: Maybe<String>;
  image?: Maybe<String>;
}

export interface TalkCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutTalksInput;
  talkComments?: Maybe<TalkCommentCreateManyWithoutTalkInput>;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutTalkInput>;
  talkCommentCounts?: Maybe<Int>;
  talkRepplyCounts?: Maybe<Int>;
  talkText: String;
  division: String;
}

export interface TalkUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutTalksInput>;
  talkComments?: Maybe<TalkCommentUpdateManyWithoutTalkInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutTalkInput>;
  talkCommentCounts?: Maybe<Int>;
  talkRepplyCounts?: Maybe<Int>;
  talkText?: Maybe<String>;
  division?: Maybe<String>;
}

export interface TalkUpdateManyMutationInput {
  talkCommentCounts?: Maybe<Int>;
  talkRepplyCounts?: Maybe<Int>;
  talkText?: Maybe<String>;
  division?: Maybe<String>;
}

export interface TalkCommentCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutTalkCommentsInput>;
  talk: TalkCreateOneWithoutTalkCommentsInput;
  text: String;
  talkRepplies?: Maybe<TalkRepplyCreateManyWithoutTalkCommentInput>;
}

export interface TalkCommentUpdateInput {
  user?: Maybe<UserUpdateOneWithoutTalkCommentsInput>;
  talk?: Maybe<TalkUpdateOneRequiredWithoutTalkCommentsInput>;
  text?: Maybe<String>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutTalkCommentInput>;
}

export interface TalkCommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface TalkRepplyCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutTalkReppliesInput>;
  talkComment: TalkCommentCreateOneWithoutTalkReppliesInput;
  talk: TalkCreateOneWithoutTalkReppliesInput;
  text: String;
}

export interface TalkRepplyUpdateInput {
  user?: Maybe<UserUpdateOneWithoutTalkReppliesInput>;
  talkComment?: Maybe<TalkCommentUpdateOneRequiredWithoutTalkReppliesInput>;
  talk?: Maybe<TalkUpdateOneRequiredWithoutTalkReppliesInput>;
  text?: Maybe<String>;
}

export interface TalkRepplyUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface UserUpdateInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  talks?: Maybe<TalkUpdateManyWithoutUserInput>;
  talkComments?: Maybe<TalkCommentUpdateManyWithoutUserInput>;
  talkRepplies?: Maybe<TalkRepplyUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  postCounts?: Maybe<Int>;
  likes?: Maybe<LikeUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  repplies?: Maybe<RepplyUpdateManyWithoutUserInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  suggestions?: Maybe<SuggestionUpdateManyWithoutUserInput>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  avatar?: Maybe<String>;
  nickname?: Maybe<String>;
  dateOfBirth?: Maybe<Int>;
  userId?: Maybe<String>;
  password?: Maybe<String>;
  gender?: Maybe<String>;
  bio?: Maybe<String>;
  isFollowing?: Maybe<Boolean>;
  isSelf?: Maybe<Boolean>;
  postCounts?: Maybe<Int>;
  useTermsPrivacyagreement?: Maybe<Boolean>;
  snsLogin?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FileWhereInput>;
  AND?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  OR?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  NOT?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
}

export interface LikeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LikeWhereInput>;
  AND?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
  OR?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
  NOT?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface NoticeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NoticeWhereInput>;
  AND?: Maybe<NoticeSubscriptionWhereInput[] | NoticeSubscriptionWhereInput>;
  OR?: Maybe<NoticeSubscriptionWhereInput[] | NoticeSubscriptionWhereInput>;
  NOT?: Maybe<NoticeSubscriptionWhereInput[] | NoticeSubscriptionWhereInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface RepplySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RepplyWhereInput>;
  AND?: Maybe<RepplySubscriptionWhereInput[] | RepplySubscriptionWhereInput>;
  OR?: Maybe<RepplySubscriptionWhereInput[] | RepplySubscriptionWhereInput>;
  NOT?: Maybe<RepplySubscriptionWhereInput[] | RepplySubscriptionWhereInput>;
}

export interface RoomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoomWhereInput>;
  AND?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
  OR?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
  NOT?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
}

export interface SuggestionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SuggestionWhereInput>;
  AND?: Maybe<
    SuggestionSubscriptionWhereInput[] | SuggestionSubscriptionWhereInput
  >;
  OR?: Maybe<
    SuggestionSubscriptionWhereInput[] | SuggestionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SuggestionSubscriptionWhereInput[] | SuggestionSubscriptionWhereInput
  >;
}

export interface TalkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TalkWhereInput>;
  AND?: Maybe<TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput>;
  OR?: Maybe<TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput>;
  NOT?: Maybe<TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput>;
}

export interface TalkCommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TalkCommentWhereInput>;
  AND?: Maybe<
    TalkCommentSubscriptionWhereInput[] | TalkCommentSubscriptionWhereInput
  >;
  OR?: Maybe<
    TalkCommentSubscriptionWhereInput[] | TalkCommentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    TalkCommentSubscriptionWhereInput[] | TalkCommentSubscriptionWhereInput
  >;
}

export interface TalkRepplySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TalkRepplyWhereInput>;
  AND?: Maybe<
    TalkRepplySubscriptionWhereInput[] | TalkRepplySubscriptionWhereInput
  >;
  OR?: Maybe<
    TalkRepplySubscriptionWhereInput[] | TalkRepplySubscriptionWhereInput
  >;
  NOT?: Maybe<
    TalkRepplySubscriptionWhereInput[] | TalkRepplySubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Comment {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  repply: <T = FragmentableArray<Repply>>(args?: {
    where?: RepplyWhereInput;
    orderBy?: RepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  repply: <T = Promise<AsyncIterator<RepplySubscription>>>(args?: {
    where?: RepplyWhereInput;
    orderBy?: RepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  repply: <T = FragmentableArray<Repply>>(args?: {
    where?: RepplyWhereInput;
    orderBy?: RepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  avatar?: String;
  nickname: String;
  dateOfBirth: Int;
  userId: String;
  password?: String;
  gender: String;
  bio?: String;
  isFollowing?: Boolean;
  isSelf?: Boolean;
  postCounts?: Int;
  useTermsPrivacyagreement: Boolean;
  snsLogin?: String;
  loginSecret?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  nickname: () => Promise<String>;
  dateOfBirth: () => Promise<Int>;
  userId: () => Promise<String>;
  password: () => Promise<String>;
  gender: () => Promise<String>;
  bio: () => Promise<String>;
  talks: <T = FragmentableArray<Talk>>(args?: {
    where?: TalkWhereInput;
    orderBy?: TalkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  talkComments: <T = FragmentableArray<TalkComment>>(args?: {
    where?: TalkCommentWhereInput;
    orderBy?: TalkCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  talkRepplies: <T = FragmentableArray<TalkRepply>>(args?: {
    where?: TalkRepplyWhereInput;
    orderBy?: TalkRepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isFollowing: () => Promise<Boolean>;
  isSelf: () => Promise<Boolean>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  postCounts: () => Promise<Int>;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repplies: <T = FragmentableArray<Repply>>(args?: {
    where?: RepplyWhereInput;
    orderBy?: RepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = FragmentableArray<Room>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suggestions: <T = FragmentableArray<Suggestion>>(args?: {
    where?: SuggestionWhereInput;
    orderBy?: SuggestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  useTermsPrivacyagreement: () => Promise<Boolean>;
  snsLogin: () => Promise<String>;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  avatar: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  dateOfBirth: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  talks: <T = Promise<AsyncIterator<TalkSubscription>>>(args?: {
    where?: TalkWhereInput;
    orderBy?: TalkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  talkComments: <T = Promise<AsyncIterator<TalkCommentSubscription>>>(args?: {
    where?: TalkCommentWhereInput;
    orderBy?: TalkCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  talkRepplies: <T = Promise<AsyncIterator<TalkRepplySubscription>>>(args?: {
    where?: TalkRepplyWhereInput;
    orderBy?: TalkRepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isFollowing: () => Promise<AsyncIterator<Boolean>>;
  isSelf: () => Promise<AsyncIterator<Boolean>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  postCounts: () => Promise<AsyncIterator<Int>>;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repplies: <T = Promise<AsyncIterator<RepplySubscription>>>(args?: {
    where?: RepplyWhereInput;
    orderBy?: RepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = Promise<AsyncIterator<RoomSubscription>>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suggestions: <T = Promise<AsyncIterator<SuggestionSubscription>>>(args?: {
    where?: SuggestionWhereInput;
    orderBy?: SuggestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  useTermsPrivacyagreement: () => Promise<AsyncIterator<Boolean>>;
  snsLogin: () => Promise<AsyncIterator<String>>;
  loginSecret: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  nickname: () => Promise<String>;
  dateOfBirth: () => Promise<Int>;
  userId: () => Promise<String>;
  password: () => Promise<String>;
  gender: () => Promise<String>;
  bio: () => Promise<String>;
  talks: <T = FragmentableArray<Talk>>(args?: {
    where?: TalkWhereInput;
    orderBy?: TalkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  talkComments: <T = FragmentableArray<TalkComment>>(args?: {
    where?: TalkCommentWhereInput;
    orderBy?: TalkCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  talkRepplies: <T = FragmentableArray<TalkRepply>>(args?: {
    where?: TalkRepplyWhereInput;
    orderBy?: TalkRepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isFollowing: () => Promise<Boolean>;
  isSelf: () => Promise<Boolean>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  postCounts: () => Promise<Int>;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repplies: <T = FragmentableArray<Repply>>(args?: {
    where?: RepplyWhereInput;
    orderBy?: RepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = FragmentableArray<Room>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  suggestions: <T = FragmentableArray<Suggestion>>(args?: {
    where?: SuggestionWhereInput;
    orderBy?: SuggestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  useTermsPrivacyagreement: () => Promise<Boolean>;
  snsLogin: () => Promise<String>;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Talk {
  id: ID_Output;
  talkCommentCounts?: Int;
  talkRepplyCounts?: Int;
  talkText: String;
  division: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TalkPromise extends Promise<Talk>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  talkComments: <T = FragmentableArray<TalkComment>>(args?: {
    where?: TalkCommentWhereInput;
    orderBy?: TalkCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  talkRepplies: <T = FragmentableArray<TalkRepply>>(args?: {
    where?: TalkRepplyWhereInput;
    orderBy?: TalkRepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  talkCommentCounts: () => Promise<Int>;
  talkRepplyCounts: () => Promise<Int>;
  talkText: () => Promise<String>;
  division: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkSubscription
  extends Promise<AsyncIterator<Talk>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  talkComments: <T = Promise<AsyncIterator<TalkCommentSubscription>>>(args?: {
    where?: TalkCommentWhereInput;
    orderBy?: TalkCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  talkRepplies: <T = Promise<AsyncIterator<TalkRepplySubscription>>>(args?: {
    where?: TalkRepplyWhereInput;
    orderBy?: TalkRepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  talkCommentCounts: () => Promise<AsyncIterator<Int>>;
  talkRepplyCounts: () => Promise<AsyncIterator<Int>>;
  talkText: () => Promise<AsyncIterator<String>>;
  division: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TalkNullablePromise
  extends Promise<Talk | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  talkComments: <T = FragmentableArray<TalkComment>>(args?: {
    where?: TalkCommentWhereInput;
    orderBy?: TalkCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  talkRepplies: <T = FragmentableArray<TalkRepply>>(args?: {
    where?: TalkRepplyWhereInput;
    orderBy?: TalkRepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  talkCommentCounts: () => Promise<Int>;
  talkRepplyCounts: () => Promise<Int>;
  talkText: () => Promise<String>;
  division: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkComment {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TalkCommentPromise extends Promise<TalkComment>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  talk: <T = TalkPromise>() => T;
  text: () => Promise<String>;
  talkRepplies: <T = FragmentableArray<TalkRepply>>(args?: {
    where?: TalkRepplyWhereInput;
    orderBy?: TalkRepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkCommentSubscription
  extends Promise<AsyncIterator<TalkComment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  talk: <T = TalkSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
  talkRepplies: <T = Promise<AsyncIterator<TalkRepplySubscription>>>(args?: {
    where?: TalkRepplyWhereInput;
    orderBy?: TalkRepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TalkCommentNullablePromise
  extends Promise<TalkComment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  talk: <T = TalkPromise>() => T;
  text: () => Promise<String>;
  talkRepplies: <T = FragmentableArray<TalkRepply>>(args?: {
    where?: TalkRepplyWhereInput;
    orderBy?: TalkRepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkRepply {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TalkRepplyPromise extends Promise<TalkRepply>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  talkComment: <T = TalkCommentPromise>() => T;
  talk: <T = TalkPromise>() => T;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkRepplySubscription
  extends Promise<AsyncIterator<TalkRepply>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  talkComment: <T = TalkCommentSubscription>() => T;
  talk: <T = TalkSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TalkRepplyNullablePromise
  extends Promise<TalkRepply | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  talkComment: <T = TalkCommentPromise>() => T;
  talk: <T = TalkPromise>() => T;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Post {
  id: ID_Output;
  title: String;
  caption: String;
  isLiked?: Boolean;
  likeCount?: Int;
  commentCounts?: Int;
  postPrivate: Boolean;
  repplyCounts?: Int;
  assortment: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  user: <T = UserPromise>() => T;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isLiked: () => Promise<Boolean>;
  likeCount: () => Promise<Int>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repplies: <T = FragmentableArray<Repply>>(args?: {
    where?: RepplyWhereInput;
    orderBy?: RepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commentCounts: () => Promise<Int>;
  postPrivate: () => Promise<Boolean>;
  repplyCounts: () => Promise<Int>;
  assortment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  files: <T = Promise<AsyncIterator<FileSubscription>>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isLiked: () => Promise<AsyncIterator<Boolean>>;
  likeCount: () => Promise<AsyncIterator<Int>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repplies: <T = Promise<AsyncIterator<RepplySubscription>>>(args?: {
    where?: RepplyWhereInput;
    orderBy?: RepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commentCounts: () => Promise<AsyncIterator<Int>>;
  postPrivate: () => Promise<AsyncIterator<Boolean>>;
  repplyCounts: () => Promise<AsyncIterator<Int>>;
  assortment: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  user: <T = UserPromise>() => T;
  files: <T = FragmentableArray<File>>(args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isLiked: () => Promise<Boolean>;
  likeCount: () => Promise<Int>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  repplies: <T = FragmentableArray<Repply>>(args?: {
    where?: RepplyWhereInput;
    orderBy?: RepplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  commentCounts: () => Promise<Int>;
  postPrivate: () => Promise<Boolean>;
  repplyCounts: () => Promise<Int>;
  assortment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface File {
  id: ID_Output;
  url: String;
  postRatio?: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  postRatio: () => Promise<Float>;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  postRatio: () => Promise<AsyncIterator<Float>>;
  post: <T = PostSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FileNullablePromise
  extends Promise<File | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  postRatio: () => Promise<Float>;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Like {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LikePromise extends Promise<Like>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LikeSubscription
  extends Promise<AsyncIterator<Like>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  post: <T = PostSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LikeNullablePromise
  extends Promise<Like | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Repply {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RepplyPromise extends Promise<Repply>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  user: <T = UserPromise>() => T;
  comment: <T = CommentPromise>() => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RepplySubscription
  extends Promise<AsyncIterator<Repply>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  comment: <T = CommentSubscription>() => T;
  post: <T = PostSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RepplyNullablePromise
  extends Promise<Repply | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  user: <T = UserPromise>() => T;
  comment: <T = CommentPromise>() => T;
  post: <T = PostPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Room {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RoomPromise extends Promise<Room>, Fragmentable {
  id: () => Promise<ID_Output>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RoomSubscription
  extends Promise<AsyncIterator<Room>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  participants: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoomNullablePromise
  extends Promise<Room | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Message {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  from: <T = UserPromise>() => T;
  to: <T = UserPromise>() => T;
  room: <T = RoomPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  from: <T = UserSubscription>() => T;
  to: <T = UserSubscription>() => T;
  room: <T = RoomSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  from: <T = UserPromise>() => T;
  to: <T = UserPromise>() => T;
  room: <T = RoomPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Suggestion {
  id: ID_Output;
  text: String;
  image?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SuggestionPromise extends Promise<Suggestion>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  text: () => Promise<String>;
  image: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SuggestionSubscription
  extends Promise<AsyncIterator<Suggestion>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  text: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SuggestionNullablePromise
  extends Promise<Suggestion | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  text: () => Promise<String>;
  image: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LikeConnection {
  pageInfo: PageInfo;
  edges: LikeEdge[];
}

export interface LikeConnectionPromise
  extends Promise<LikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LikeEdge>>() => T;
  aggregate: <T = AggregateLikePromise>() => T;
}

export interface LikeConnectionSubscription
  extends Promise<AsyncIterator<LikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLikeSubscription>() => T;
}

export interface LikeEdge {
  node: Like;
  cursor: String;
}

export interface LikeEdgePromise extends Promise<LikeEdge>, Fragmentable {
  node: <T = LikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LikeEdgeSubscription
  extends Promise<AsyncIterator<LikeEdge>>,
    Fragmentable {
  node: <T = LikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLike {
  count: Int;
}

export interface AggregateLikePromise
  extends Promise<AggregateLike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLikeSubscription
  extends Promise<AsyncIterator<AggregateLike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Notice {
  id: ID_Output;
  title: String;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface NoticePromise extends Promise<Notice>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NoticeSubscription
  extends Promise<AsyncIterator<Notice>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NoticeNullablePromise
  extends Promise<Notice | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NoticeConnection {
  pageInfo: PageInfo;
  edges: NoticeEdge[];
}

export interface NoticeConnectionPromise
  extends Promise<NoticeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NoticeEdge>>() => T;
  aggregate: <T = AggregateNoticePromise>() => T;
}

export interface NoticeConnectionSubscription
  extends Promise<AsyncIterator<NoticeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NoticeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNoticeSubscription>() => T;
}

export interface NoticeEdge {
  node: Notice;
  cursor: String;
}

export interface NoticeEdgePromise extends Promise<NoticeEdge>, Fragmentable {
  node: <T = NoticePromise>() => T;
  cursor: () => Promise<String>;
}

export interface NoticeEdgeSubscription
  extends Promise<AsyncIterator<NoticeEdge>>,
    Fragmentable {
  node: <T = NoticeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNotice {
  count: Int;
}

export interface AggregateNoticePromise
  extends Promise<AggregateNotice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNoticeSubscription
  extends Promise<AsyncIterator<AggregateNotice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RepplyConnection {
  pageInfo: PageInfo;
  edges: RepplyEdge[];
}

export interface RepplyConnectionPromise
  extends Promise<RepplyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RepplyEdge>>() => T;
  aggregate: <T = AggregateRepplyPromise>() => T;
}

export interface RepplyConnectionSubscription
  extends Promise<AsyncIterator<RepplyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RepplyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRepplySubscription>() => T;
}

export interface RepplyEdge {
  node: Repply;
  cursor: String;
}

export interface RepplyEdgePromise extends Promise<RepplyEdge>, Fragmentable {
  node: <T = RepplyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RepplyEdgeSubscription
  extends Promise<AsyncIterator<RepplyEdge>>,
    Fragmentable {
  node: <T = RepplySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRepply {
  count: Int;
}

export interface AggregateRepplyPromise
  extends Promise<AggregateRepply>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRepplySubscription
  extends Promise<AsyncIterator<AggregateRepply>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoomConnection {
  pageInfo: PageInfo;
  edges: RoomEdge[];
}

export interface RoomConnectionPromise
  extends Promise<RoomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoomEdge>>() => T;
  aggregate: <T = AggregateRoomPromise>() => T;
}

export interface RoomConnectionSubscription
  extends Promise<AsyncIterator<RoomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoomSubscription>() => T;
}

export interface RoomEdge {
  node: Room;
  cursor: String;
}

export interface RoomEdgePromise extends Promise<RoomEdge>, Fragmentable {
  node: <T = RoomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoomEdgeSubscription
  extends Promise<AsyncIterator<RoomEdge>>,
    Fragmentable {
  node: <T = RoomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoom {
  count: Int;
}

export interface AggregateRoomPromise
  extends Promise<AggregateRoom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoomSubscription
  extends Promise<AsyncIterator<AggregateRoom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SuggestionConnection {
  pageInfo: PageInfo;
  edges: SuggestionEdge[];
}

export interface SuggestionConnectionPromise
  extends Promise<SuggestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SuggestionEdge>>() => T;
  aggregate: <T = AggregateSuggestionPromise>() => T;
}

export interface SuggestionConnectionSubscription
  extends Promise<AsyncIterator<SuggestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SuggestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSuggestionSubscription>() => T;
}

export interface SuggestionEdge {
  node: Suggestion;
  cursor: String;
}

export interface SuggestionEdgePromise
  extends Promise<SuggestionEdge>,
    Fragmentable {
  node: <T = SuggestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SuggestionEdgeSubscription
  extends Promise<AsyncIterator<SuggestionEdge>>,
    Fragmentable {
  node: <T = SuggestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSuggestion {
  count: Int;
}

export interface AggregateSuggestionPromise
  extends Promise<AggregateSuggestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSuggestionSubscription
  extends Promise<AsyncIterator<AggregateSuggestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TalkConnection {
  pageInfo: PageInfo;
  edges: TalkEdge[];
}

export interface TalkConnectionPromise
  extends Promise<TalkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TalkEdge>>() => T;
  aggregate: <T = AggregateTalkPromise>() => T;
}

export interface TalkConnectionSubscription
  extends Promise<AsyncIterator<TalkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TalkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTalkSubscription>() => T;
}

export interface TalkEdge {
  node: Talk;
  cursor: String;
}

export interface TalkEdgePromise extends Promise<TalkEdge>, Fragmentable {
  node: <T = TalkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TalkEdgeSubscription
  extends Promise<AsyncIterator<TalkEdge>>,
    Fragmentable {
  node: <T = TalkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTalk {
  count: Int;
}

export interface AggregateTalkPromise
  extends Promise<AggregateTalk>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTalkSubscription
  extends Promise<AsyncIterator<AggregateTalk>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TalkCommentConnection {
  pageInfo: PageInfo;
  edges: TalkCommentEdge[];
}

export interface TalkCommentConnectionPromise
  extends Promise<TalkCommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TalkCommentEdge>>() => T;
  aggregate: <T = AggregateTalkCommentPromise>() => T;
}

export interface TalkCommentConnectionSubscription
  extends Promise<AsyncIterator<TalkCommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TalkCommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTalkCommentSubscription>() => T;
}

export interface TalkCommentEdge {
  node: TalkComment;
  cursor: String;
}

export interface TalkCommentEdgePromise
  extends Promise<TalkCommentEdge>,
    Fragmentable {
  node: <T = TalkCommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TalkCommentEdgeSubscription
  extends Promise<AsyncIterator<TalkCommentEdge>>,
    Fragmentable {
  node: <T = TalkCommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTalkComment {
  count: Int;
}

export interface AggregateTalkCommentPromise
  extends Promise<AggregateTalkComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTalkCommentSubscription
  extends Promise<AsyncIterator<AggregateTalkComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TalkRepplyConnection {
  pageInfo: PageInfo;
  edges: TalkRepplyEdge[];
}

export interface TalkRepplyConnectionPromise
  extends Promise<TalkRepplyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TalkRepplyEdge>>() => T;
  aggregate: <T = AggregateTalkRepplyPromise>() => T;
}

export interface TalkRepplyConnectionSubscription
  extends Promise<AsyncIterator<TalkRepplyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TalkRepplyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTalkRepplySubscription>() => T;
}

export interface TalkRepplyEdge {
  node: TalkRepply;
  cursor: String;
}

export interface TalkRepplyEdgePromise
  extends Promise<TalkRepplyEdge>,
    Fragmentable {
  node: <T = TalkRepplyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TalkRepplyEdgeSubscription
  extends Promise<AsyncIterator<TalkRepplyEdge>>,
    Fragmentable {
  node: <T = TalkRepplySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTalkRepply {
  count: Int;
}

export interface AggregateTalkRepplyPromise
  extends Promise<AggregateTalkRepply>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTalkRepplySubscription
  extends Promise<AsyncIterator<AggregateTalkRepply>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface FilePreviousValues {
  id: ID_Output;
  url: String;
  postRatio?: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  postRatio: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  postRatio: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LikeSubscriptionPayload {
  mutation: MutationType;
  node: Like;
  updatedFields: String[];
  previousValues: LikePreviousValues;
}

export interface LikeSubscriptionPayloadPromise
  extends Promise<LikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LikePreviousValuesPromise>() => T;
}

export interface LikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LikePreviousValuesSubscription>() => T;
}

export interface LikePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LikePreviousValuesPromise
  extends Promise<LikePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LikePreviousValuesSubscription
  extends Promise<AsyncIterator<LikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NoticeSubscriptionPayload {
  mutation: MutationType;
  node: Notice;
  updatedFields: String[];
  previousValues: NoticePreviousValues;
}

export interface NoticeSubscriptionPayloadPromise
  extends Promise<NoticeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NoticePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NoticePreviousValuesPromise>() => T;
}

export interface NoticeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NoticeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NoticeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NoticePreviousValuesSubscription>() => T;
}

export interface NoticePreviousValues {
  id: ID_Output;
  title: String;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface NoticePreviousValuesPromise
  extends Promise<NoticePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NoticePreviousValuesSubscription
  extends Promise<AsyncIterator<NoticePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  caption: String;
  isLiked?: Boolean;
  likeCount?: Int;
  commentCounts?: Int;
  postPrivate: Boolean;
  repplyCounts?: Int;
  assortment: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  isLiked: () => Promise<Boolean>;
  likeCount: () => Promise<Int>;
  commentCounts: () => Promise<Int>;
  postPrivate: () => Promise<Boolean>;
  repplyCounts: () => Promise<Int>;
  assortment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  isLiked: () => Promise<AsyncIterator<Boolean>>;
  likeCount: () => Promise<AsyncIterator<Int>>;
  commentCounts: () => Promise<AsyncIterator<Int>>;
  postPrivate: () => Promise<AsyncIterator<Boolean>>;
  repplyCounts: () => Promise<AsyncIterator<Int>>;
  assortment: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RepplySubscriptionPayload {
  mutation: MutationType;
  node: Repply;
  updatedFields: String[];
  previousValues: RepplyPreviousValues;
}

export interface RepplySubscriptionPayloadPromise
  extends Promise<RepplySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RepplyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RepplyPreviousValuesPromise>() => T;
}

export interface RepplySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RepplySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RepplySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RepplyPreviousValuesSubscription>() => T;
}

export interface RepplyPreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RepplyPreviousValuesPromise
  extends Promise<RepplyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RepplyPreviousValuesSubscription
  extends Promise<AsyncIterator<RepplyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoomSubscriptionPayload {
  mutation: MutationType;
  node: Room;
  updatedFields: String[];
  previousValues: RoomPreviousValues;
}

export interface RoomSubscriptionPayloadPromise
  extends Promise<RoomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoomPreviousValuesPromise>() => T;
}

export interface RoomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoomPreviousValuesSubscription>() => T;
}

export interface RoomPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RoomPreviousValuesPromise
  extends Promise<RoomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RoomPreviousValuesSubscription
  extends Promise<AsyncIterator<RoomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SuggestionSubscriptionPayload {
  mutation: MutationType;
  node: Suggestion;
  updatedFields: String[];
  previousValues: SuggestionPreviousValues;
}

export interface SuggestionSubscriptionPayloadPromise
  extends Promise<SuggestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SuggestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SuggestionPreviousValuesPromise>() => T;
}

export interface SuggestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SuggestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SuggestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SuggestionPreviousValuesSubscription>() => T;
}

export interface SuggestionPreviousValues {
  id: ID_Output;
  text: String;
  image?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SuggestionPreviousValuesPromise
  extends Promise<SuggestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  image: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SuggestionPreviousValuesSubscription
  extends Promise<AsyncIterator<SuggestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TalkSubscriptionPayload {
  mutation: MutationType;
  node: Talk;
  updatedFields: String[];
  previousValues: TalkPreviousValues;
}

export interface TalkSubscriptionPayloadPromise
  extends Promise<TalkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TalkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TalkPreviousValuesPromise>() => T;
}

export interface TalkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TalkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TalkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TalkPreviousValuesSubscription>() => T;
}

export interface TalkPreviousValues {
  id: ID_Output;
  talkCommentCounts?: Int;
  talkRepplyCounts?: Int;
  talkText: String;
  division: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TalkPreviousValuesPromise
  extends Promise<TalkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  talkCommentCounts: () => Promise<Int>;
  talkRepplyCounts: () => Promise<Int>;
  talkText: () => Promise<String>;
  division: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkPreviousValuesSubscription
  extends Promise<AsyncIterator<TalkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  talkCommentCounts: () => Promise<AsyncIterator<Int>>;
  talkRepplyCounts: () => Promise<AsyncIterator<Int>>;
  talkText: () => Promise<AsyncIterator<String>>;
  division: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TalkCommentSubscriptionPayload {
  mutation: MutationType;
  node: TalkComment;
  updatedFields: String[];
  previousValues: TalkCommentPreviousValues;
}

export interface TalkCommentSubscriptionPayloadPromise
  extends Promise<TalkCommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TalkCommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TalkCommentPreviousValuesPromise>() => T;
}

export interface TalkCommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TalkCommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TalkCommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TalkCommentPreviousValuesSubscription>() => T;
}

export interface TalkCommentPreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TalkCommentPreviousValuesPromise
  extends Promise<TalkCommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkCommentPreviousValuesSubscription
  extends Promise<AsyncIterator<TalkCommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TalkRepplySubscriptionPayload {
  mutation: MutationType;
  node: TalkRepply;
  updatedFields: String[];
  previousValues: TalkRepplyPreviousValues;
}

export interface TalkRepplySubscriptionPayloadPromise
  extends Promise<TalkRepplySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TalkRepplyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TalkRepplyPreviousValuesPromise>() => T;
}

export interface TalkRepplySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TalkRepplySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TalkRepplySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TalkRepplyPreviousValuesSubscription>() => T;
}

export interface TalkRepplyPreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TalkRepplyPreviousValuesPromise
  extends Promise<TalkRepplyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TalkRepplyPreviousValuesSubscription
  extends Promise<AsyncIterator<TalkRepplyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  avatar?: String;
  nickname: String;
  dateOfBirth: Int;
  userId: String;
  password?: String;
  gender: String;
  bio?: String;
  isFollowing?: Boolean;
  isSelf?: Boolean;
  postCounts?: Int;
  useTermsPrivacyagreement: Boolean;
  snsLogin?: String;
  loginSecret?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  nickname: () => Promise<String>;
  dateOfBirth: () => Promise<Int>;
  userId: () => Promise<String>;
  password: () => Promise<String>;
  gender: () => Promise<String>;
  bio: () => Promise<String>;
  isFollowing: () => Promise<Boolean>;
  isSelf: () => Promise<Boolean>;
  postCounts: () => Promise<Int>;
  useTermsPrivacyagreement: () => Promise<Boolean>;
  snsLogin: () => Promise<String>;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  avatar: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  dateOfBirth: () => Promise<AsyncIterator<Int>>;
  userId: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  isFollowing: () => Promise<AsyncIterator<Boolean>>;
  isSelf: () => Promise<AsyncIterator<Boolean>>;
  postCounts: () => Promise<AsyncIterator<Int>>;
  useTermsPrivacyagreement: () => Promise<AsyncIterator<Boolean>>;
  snsLogin: () => Promise<AsyncIterator<String>>;
  loginSecret: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Talk",
    embedded: false
  },
  {
    name: "TalkComment",
    embedded: false
  },
  {
    name: "TalkRepply",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Like",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Repply",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  },
  {
    name: "Room",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Notice",
    embedded: false
  },
  {
    name: "Suggestion",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
